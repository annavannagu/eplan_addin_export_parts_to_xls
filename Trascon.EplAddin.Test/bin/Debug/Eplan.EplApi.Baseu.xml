<?xml version="1.0"?>
<doc>
    <assembly>
        "Eplan.EplApi.Base"
    </assembly>
    <members>
        <member name="M:Eplan.EplApi.Base.PointD3D.GetEPoint3D(EPoint3D*)">
            <summary>
\internal
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD3D.SetEPoint3D(EPoint3D!System.Runtime.CompilerServices.IsConst*)">
            <summary>
\internal
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointD3D.Z">
            <summary>
Z coordinate
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointD3D.Y">
            <summary>
Y coordinate
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointD3D.X">
            <summary>
X coordinate
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD3D.#ctor(System.Double,System.Double,System.Double)">
            <summary> 
Constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.PointD3D">
            <summary> 
This class represents a set of 3D coordinates in EPLAN.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.ExecuteInMainThreadSync(Eplan.EplApi.Base.Internal.ExecuteInEplanMainThreadDelegate3,System.Object)">
            <summary>
Execute this work in main thread. 
</summary>
            <exception cref="!:Eplan::EplApi::Base::BaseException">Thrown when no MainThreadDispatcher was set.</exception>
            <param name="pExecuteDelegate">The work to be done.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.AddProgressBackgroundWork(Eplan.EplApi.Base.Progress,Eplan.EplApi.Base.Internal.BackgroundProgressWorkDelegate)">
            <summary>
Execute this work in background of a progress. 
</summary>
            <param name="pProgress">The Progress at work.</param>
            <param name="workDelegate">The work to be done.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.ExecuteInMainThreadAsync(Eplan.EplApi.Base.Internal.ExecuteInEplanMainThreadDelegate2,System.Object,System.Object)">
            <summary>
Execute this work in main thread. 
</summary>
            <exception cref="!:Eplan::EplApi::Base::BaseException">Thrown when no MainThreadDispatcher was set.</exception>
            <param name="pExecuteDelegate">The work to be done.</param>
            <param name="x">Parameter 1 for the work delegate</param>
            <param name="y">Parameter 2 for the work delegate</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.ExecuteInMainThreadAsync(Eplan.EplApi.Base.Internal.ExecuteInEplanMainThreadDelegate1,System.Object)">
            <summary>
Execute this work in main thread. 
</summary>
            <exception cref="!:Eplan::EplApi::Base::BaseException">Thrown when no MainThreadDispatcher was set.</exception>
            <param name="pExecuteDelegate">The work to be done.</param>
            <param name="x">Parameter 1 for the work delegate</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.ExecuteInMainThreadAsync(Eplan.EplApi.Base.Internal.ExecuteInEplanMainThreadDelegate)">
            <summary>
Execute this work in main thread. 
</summary>
            <exception cref="!:Eplan::EplApi::Base::BaseException">Thrown when no MainThreadDispatcher was set.</exception>
            <param name="pExecuteDelegate">The work to be done.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.CanAccessMainThread">
            <summary>
Main Thread Accessed?
</summary>
            <exception cref="!:Eplan::EplApi::Base::BaseException">Thrown when no MainThreadDispatcher was set.</exception>
            <returns>
true then execution is possible.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.GetMainThreadDispatcher">
            <summary>
Get the mainThreadDispatcher.
</summary>
            <returns>
The main thread dispatcher of this application
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.SetMainThreadDispatcher(System.Windows.Threading.Dispatcher)">
            <summary>
Set the mainThreadDispatcher once.
</summary>
            <param name="mainThreadDispatcher">The main thread dispatcher of this application</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher.#ctor">
            <summary>
Creates a new dispatcher
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.EplanMainThreadDispatcher">
            <summary>
EplanMainThreadDispatcher can execute some work in the main thread of Eplan. The work
is done async, when the mainthread is currently waiting for a backgroundwork to be done.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.ExecuteInEplanMainThreadDelegate">
            <summary>
Delegate to give EplanMainThreadDispatcher some work.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.EplTrace.Trace(System.Reflection.Assembly,System.String)">
            <summary>
Writes the text to EplLog.txt when Trace is on.
</summary>
            <param name="assembly">The assembly calling this function. This when Trrace is on for
this assembly, the output is written.</param>
            <param name="strMessage">The message to be traced to epllog.txt</param>
        </member>
        <member name="M:Eplan.EplApi.Base.EplTrace.Trace(System.String)">
            <summary>
Writes the text to EplLog.txt when Trace is on. The Calling Assembly is asked for
the trace switch state on or off.
</summary>
            <param name="strMessage">The message to be traced to epllog.txt</param>
        </member>
        <member name="T:Eplan.EplApi.Base.EplTrace">
            <summary>
Trace the output to the EplLog.txt file. This Trace class
works in debug and release mode, while the trace listener
works only in debug mode. Traces are written when the
registry key HKCU / Software / Eplan / Eplan W3 / Trace /
\-ModuleName- is found.
</summary>
            <example>
\Example of TRACE outputs
<code lang="c#">
Eplan.EplApi.Base.EplTrace oTrace= <b>new</b> Eplan.EplApi.Base.EplTrace();
oTrace.Trace ("Eplan.EplApi.Base", "Start executing function abc");
</code></example>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.CreateMySchemeSetting">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetLocalizedNameSettingPath">
            <summary>
Returns Setting path to the localized name of this scheme.
</summary>
            <returns>
The setting path of the data node of the current scheme.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetNodeHandle">
            <summary>
Returns the <see text="Eplan.EplApi.Base.SettingNode" cref="T:Eplan.EplApi.Base.SettingNode" /> of the data node of the current setting.
The individual settings can now be accessed via the functions of the <see text="Eplan.EplApi.Base.SettingNode" cref="T:Eplan.EplApi.Base.SettingNode" />.

</summary>
            <returns>
The <see text="Eplan.EplApi.Base.SettingNode" cref="T:Eplan.EplApi.Base.SettingNode" /> of the data node of the current scheme.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.CountSetting(System.String)">
            <summary>
Number of additional settings existing under the specified setting name.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <returns>
Number of indexed settings of this setting in the scheme. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetStringSetting(System.String,System.String,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="strvalue">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetDoubleSetting(System.String,System.Double,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetNumericSetting(System.String,System.Int32,System.Int32)">
            <summary>
Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="nValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetBoolSetting(System.String,System.Boolean,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetMultiLangStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetDoubleSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetNumericSetting(System.String,System.Int32)">
            <summary>
Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetBoolSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting (relative to scheme, path starts after scheme name).</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.ImportSchemes(System.String,System.Boolean)">
            <summary>
import all schemes from file file.
</summary>
            <param name="strFileName">The file to import from to. Must include the complete path</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.ImportScheme(System.String,System.String,System.Boolean)">
            <summary>
import a scheme from file.
</summary>
            <param name="strSettingsNodeName">The node name in the settings (of the file)</param>
            <param name="strFileName">The file to import from. Must include the complete path. Inside the node with the name strSettingsNodeName has to exist</param>
            <param name="bOverwriteExisting">Overwrite any existing scheme with the same name</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The file passed to strFileName does not contain scheme with name from strSettingsNodeName parameter. Or scheme already exists but bOverwriteExisting is set to false.
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.ExportSchemes(System.String)">
            <summary>
export all schemes to file.
</summary>
            <param name="strFileName">The file to export to. Must include the complete path.  The file is cleared before.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.ExportScheme(System.String,System.String)">
            <summary>
export a scheme to file.
</summary>
            <param name="strSettingsNodeName">The node name in the settings</param>
            <param name="strFileName">The file to export to. Must include the complete path. The file is cleared before.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The scheme with this strSettingsNodeName does not exist
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.RemoveScheme(System.String)">
            <summary>
Remove a new scheme.
</summary>
            <param name="strSettingsNodeName">The node name in the settings</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The scheme with this strSettingsNodeName does not exist
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The scheme only has one more scheme left. The last one is not allowed to delete.
</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
A Read only scheme is not allowed to delete.
</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.CopyScheme(System.String,System.String,Eplan.EplApi.Base.MultiLangString,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Copy an existing scheme. 
</summary>
            <param name="strSettingsSourceNodeName">Node name of the source scheme</param>
            <param name="strSettingsTargetNodeName">Node name of the the new scheme</param>
            <param name="mlTargetNewName">Displayed name of the new scheme</param>
            <param name="mlTargetDescription">Description of the new scheme</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The scheme with this strSettingsTargetNodeName already exists or the source scheme does not exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.CreateScheme(System.String,Eplan.EplApi.Base.MultiLangString,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Create a new scheme with a specified name, description and
the node name for the settings. The data for the new scheme is specified by 
P8 for each scheme type. The data is the same as the new button in the 
scheme dialog of P8.
</summary>
            <param name="mlNewName">The new name of the scheme</param>
            <param name="mlDescription">The description of the scheme</param>
            <param name="strSettingsNodeName">The node name in the settings</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a parameter is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The scheme with this strSettingsNodeName already exists
</exception>
        </member>
        <member name="P:Eplan.EplApi.Base.SchemeSetting.ReadOnly">
            <summary>
Gives write permission to settings of this scheme.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.SchemeSetting.Description">
            <summary>
Returns a multilingual description text of the scheme.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.SchemeSetting.MLangName">
            <summary>
Returns a multilingual scheme name.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.CheckIfSchemeExists(System.String)">
            <summary>Checks whether a scheme is defined.</summary>
            <returns>
True: Scheme exists; False: No scheme defined
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetName">
            <summary>Returns a language-independent, internal scheme identifier.</summary>
            <returns>
Identifier of the current scheme.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetLastUsed">
            <summary>
Returns the last used scheme name (node LastUsed).
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetLastUsed(System.String)">
            <summary>Sets the strName scheme as the current one. Value in node LastUsed will be strName</summary>
            <param name="strName">
Name of the scheme to which lastUsed is to be set.
</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strName</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strName</c> is empty.</exception>
            <exception cref="!:System::BaseException">Thrown when strName is not a valid last used scheme.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.ResetScheme">
            <summary>
Sets LastUsed as the current scheme.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetScheme(System.String)">
            <summary> Sets a scheme by its name (LastUsed remains unchanged!)</summary>
            <param name="strName">
Name of the requested scheme.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.SetScheme(System.Int32)">
            <summary> Sets a scheme by its number (LastUsed remains unchanged!)</summary>
            <param name="i">
Index of the requested scheme.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.GetCount">
            <summary> Returns the number of various schemes in this scheme.</summary>
            <returns>
The number of individual scheme groups in the initialized scheme <see text="Eplan.EplApi.Base.SchemeSetting.init(System.String)" cref="!:Eplan::EplApi::Base::SchemeSetting::init(System::String)" />.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.Init(System.String)">
            <summary>
Initializes object with a settings node path.
</summary>
            <param name="strScheme">
Path to the settings node, for example USER.DXF.SCHEMES
</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when scheme with given settings node path can not be found.</exception>
            <example>Creating a SchemeSetting object and initializing it with a settings node path
<code lang="C#">
SchemeSetting oSchemeSetting= new SchemeSetting();
oSchemeSetting.init("USER.DXF.SCHEMES");
</code></example>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.Set">
            <summary>
Setup internal members
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.Finalize">
            <summary>
Non-deterministic Finalizer of SchemeSetting object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.Dispose">
            <summary>
For internal use only. Needed if the scheme exists in a project's settings
</summary>
            <summary>
Destructor for deterministic finalization of SchemeSetting object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.#ctor(ESchemeSetting*)">
            <summary>
For internal use only. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SchemeSetting.#ctor">
            <summary>
Creates a new object for editing schemes.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.SchemeSetting">
            <summary>
Class for editing settings that are grouped into schemes
</summary>
            <example>
                <code lang="c#">
SchemeSetting oSchemeSetting= new SchemeSetting();
oSchemeSetting.Init("USER.DXF.SCHEMES");
oSchemeSetting.SetScheme("DXFSchemeToSelect"); 
get one value of the scheme
int iExportFormatVersion = oSchemeSetting.GetNumericSetting("EXPORT.FORMAT_VERSION", 0);
</code>
            </example>
            <seealso text="Settings" cref="!:ApiFramework\AddIns\Settings.htm" />
            <internal>
                <see text="Schemes and settings" cref="!:http:\\intranet\fue\prod\Eplan608871040Redesign\Developer3479249440Guide\APPBASICS\Schemata1971978520und2014063720Settings.doc#VerwendungVonSchemataUndSettings" />
            </internal>
        </member>
        <member name="M:Eplan.EplApi.Base.ProgressFactory.UnRegisterProgress(Eplan.EplApi.Base.IEplProgress)">
            <summary>
unRegisters the progress from the eplan framework
</summary>
            <param name="pProgress">The progress object to unregister
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ProgressFactory.RegisterProgress(Eplan.EplApi.Base.IEplProgress)">
            <summary>
Registers the progress in the eplan framework
</summary>
            <param name="pProgress">The progress object to register
</param>
        </member>
        <member name="T:Eplan.EplApi.Base.ProgressFactory">
            <summary>
This class can be used for OfflineApplications. With RegisterProgress a progress
can be installed in Eplan. 
UnregisterProgress removes this progress from Eplan again.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.EndPartCalled(System.Int32,System.String)">
            <summary>
One progress part ends. Perhaps you want to set a new actiontext for this part!
</summary>
            <param name="nNewLevel">which part is started.</param>
            <param name="strActionText">the new action text for this part.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.BeginPartCalled(System.Int32,System.String)">
            <summary>
The begin of a new progress part. Perhaps you want to set a new actiontext for this part!
</summary>
            <param name="nNewLevel">which part is started.</param>
            <param name="strActionText">the new action text for this part.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.SetAllowCancel(System.Boolean)">
            <summary>
This progress supports cancel or not. Disable the close button of a progress when cancel is 
not allowed!
</summary>
            <param name="bAllow">true: cancelling is allowed</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.ResetCanceled">
            <summary>
The cancel was resetted.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.SetProgressStep(System.Int32,System.Int32)">
            <summary>
The actual stepping of the progress. The function is called for every level the 
progress supports. 
</summary>
            <param name="nLevel">1 to GetLevelCount + 1. 1 is the overall progress</param>
            <param name="nSpent">Contains the new value the progress should show. Is always between 0 and 100.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.GetLevelCount">
            <summary>
Get the level count this progress supports. 
</summary>
            <returns>1 or 2 is supported by P8</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.SetActionText(System.String)">
            <summary>
Set the action text for the current progress (This is the level 1)
</summary>
            <param name="strText">The new action text.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.SetOverallActionText(System.String)">
            <summary>
Set the action text for the complete progress (This is the level 2)
</summary>
            <param name="strText">The new action text.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.CancelPressed">
            <summary>
Return true when the user pressed the cancel button
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.GetTitle">
            <summary>
Get the Title of the progress window.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.SetTitle(System.String,System.Boolean)">
            <summary>
Set the Title of the progress window.
</summary>
            <param name="strTitle">The new title of the window.</param>
            <param name="bSetOnlyIfEmpty">Please, set only the title if not set before!</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.DestroyProgressWindow">
            <summary>
Remove the progress window again
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.CreateProgressWindow">
            <summary>
Create the progress Window
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IEplProgress.OnRegister(System.String@,System.Int32@,System.Boolean@)">
            <summary>
Register the progreess
</summary>
            <param name="Name">Name under which the action is registered in the system.</param>
            <param name="Ordinal">Overload level of progress</param>
            <param name="bNoMainFrame">Whether this progress needs a mainframe window.</param>
            <returns>true: The return parameters are valid.</returns>
        </member>
        <member name="T:Eplan.EplApi.Base.IEplProgress">
            <summary>
Interface declaration for a progress. 
When a progress is to be registered for an add-in (an assembly) in the system, this
interface must be implemented by a class of the add-in.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.FileSelectDecisionContext.CustomDefaultPath">
            <summary>
Set or get the CustomDefaultPath. This is the path the File Select Dialog
opens first. The second time the path is used the user has selected the last time.
Then the context menu "Set to standard" will select this path again.
</summary>
            <remarks>
When the strCustomDefaultPath is empty, the system fills it automatically again.
</remarks>
            <param name="strCustomDefaultPath">the standard Path</param>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.GetFiles">
            <summary>
Get all the files the user has selected in the decider dialog.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.AddFilter(System.String,System.String)">
            <summary>
Add a filter which files are shown. When the user selects one filter in the decider dialog,
only files of this type are displayed.
</summary>
            <param name="strDescription">The description visible to the user, p.e. "Text files *.txt"</param>
            <param name="strExtension">The filter, p.e. "*.txt"</param>
            <remarks>
When the strDescription is empty, the system fills it automatically. This is the
description used in EPLAN when the same filter is registered there or a automatically
formed one from the extensions.
The filter also influence the path the file select dialog is opened first. Some of the registered extensions
have a standard path. When the standard path is the same for all extensions, this standard path is used.
It is possible to set a custom StandardPath with the function CustomDefaultPath.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.Base.FileSelectDecisionContext.AllowMultiSelect">
            <summary>
Set or get the flag for multi selection.
</summary>
            <param name="bAllow">true: allow multi selection.</param>
        </member>
        <member name="P:Eplan.EplApi.Base.FileSelectDecisionContext.OpenFileFlag">
            <summary>
Set or get the openfileflag. Set this flag when you want to open a file
Do not set it when you want to save a file.
</summary>
            <param name="strDefExt">the new value.</param>
        </member>
        <member name="P:Eplan.EplApi.Base.FileSelectDecisionContext.DefaultExtension">
            <summary>
The default extension of the files to select.
</summary>
            <remarks>
DefaultExtension is added to the file when the user writes the filename and does not specify the extension.
</remarks>
            <param name="strDefExt">the string containing the default extension like "txt".</param>
        </member>
        <member name="P:Eplan.EplApi.Base.FileSelectDecisionContext.Title">
            <summary>
The title for the decider.
</summary>
            <param name="strTitle">the string containing the title.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.Finalize">
            <summary>
Non-deterministic Finalizer of FileSelectDecisionContext object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.Dispose">
            <summary>
Destructor for deterministic finalization of FileSelectDecisionContext object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.#ctor(System.String,Eplan.EplApi.Base.EnumDecisionReturn)">
            <summary>
Create a new FileSelectDecisionContext Object.
</summary>
            <param name="strDecisionId">The identifier for this fileselect. Use a unique one and the 
fileselect dialog remembers the user input and dialog position for the next time.</param>
            <param name="eDefaultDecision">A default decision, this one is preselected in the dialog.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.FileSelectDecisionContext.#ctor">
            <summary>
Create a new FileSelectDecisionContext Object.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.FileSelectDecisionContext">
            <summary>
This class can be used for an standard eplan decider
</summary>
            <example> Example of using Decider class with a FileSelectDecisionContext : 
<use name="P8_API_Example_Base_FileSelectDecisionContext_Example1.cs.txt" /></example>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.Decide(Eplan.EplApi.Base.FileSelectDecisionContext)">
            <summary>
decide shows a Fileselect dialog.
</summary>
            <param name="fileselect">A fileselect context with all informations</param>
            <returns>The return value is the pressed button or error.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.Decide(Eplan.EplApi.Base.EnumDecisionType,System.String,System.String,Eplan.EplApi.Base.EnumDecisionReturn,Eplan.EplApi.Base.EnumDecisionReturn,System.String,System.Boolean,Eplan.EplApi.Base.EnumDecisionIcon)">
            <summary>
decide shows the dialog. When the application id in quiet mode, the 
batch decision is returned.
</summary>
            <param name="type">the type of the decider</param>
            <param name="strText">The text to show in the window.</param>
            <param name="strTitle">The title of the window</param>
            <param name="eDefaultDecision">A default decision, this one is preselected in the dialog.</param>
            <param name="eBatchDecision">The decision taken when no dialogs are allowed. 
used in quiet mode.</param>
            <param name="strDecisionId">The decision id. A unique text to identify
this dialog. Needed when the checkbox should be shown.</param>
            <param name="bShowCheckBox">Show a checkbox like "do not show this decision
again". Then the batch decision is returned the next time.</param>
            <param name="eIcon">The icon displayed on the dialog.</param>
            <returns>The return value includes the pressed button or error.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.Decide(Eplan.EplApi.Base.EnumDecisionType,System.String,System.String,Eplan.EplApi.Base.EnumDecisionReturn,Eplan.EplApi.Base.EnumDecisionReturn)">
            <summary>
Decide shows the dialog. When the application id in quiet
mode, the batch decision is returned. The icon used is an
EXCLAMATION.
</summary>
            <param name="type">The type of the decider</param>
            <param name="strText">The text to show in the
                      window.</param>
            <param name="strTitle">The title of the window</param>
            <param name="eDefaultDecision">A default decision, this one
                               is preselected in the dialog.</param>
            <param name="eBatchDecision">The decision taken when no
                             dialogs are allowed. used in
                             quiet mode.</param>
            <returns>
The return value includes the pressed button or error.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.Finalize">
            <summary>
Non-deterministic Finalizer of Decider object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.Dispose">
            <summary>
Destructor for deterministic finalization of Decider object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Decider.#ctor">
            <summary>
Create a new Decider Object.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Decider">
            <summary>
This class implements the standard EPLAN decider dialog.
</summary>
            <example>
\Example of using Decider class:
<code lang="c#">
Decider eDecision = new Decider();
EnumDecisionReturn eAnswer = eDecision.Decide(eOkCancelDecision, "Show some dialog text", "Eplan Decider", eOK, eOK);
if (eAnswer == eOK)
{
    // Do your work
}
</code></example>
        </member>
        <member name="T:Eplan.EplApi.Base.EnumDecisionIcon">
            <summary>
Used by the <see text="Decide method" cref="!:!!OVERLOADED_Decide_Eplan::EplApi::Base::Decider" />,
to determine which icon is to be shown.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.EnumDecisionReturn">
            <summary>
This enum is returned by the <see text="Decide" cref="!:!!OVERLOADED_Decide_Eplan::EplApi::Base::Decider" />
method.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.EnumDecisionType">
            <summary>
The type one setting can hold data in.	
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.EplAssert.Assert(System.Boolean,System.String)">
            <summary>
A Delevoper Assertion. When the boolean Expression fails, the debugged application
fails into the debugger. Some Text is written to the EplLog.txt
</summary>
            <param name="strInformation">The message to be traced to epllog.txt</param>
        </member>
        <member name="T:Eplan.EplApi.Base.EplAssert">
            <summary>
The EplAssert class. When the advaced mode is activated in ELogFileConfigTool, Asserts
are written to the epllog.txt
Its also possible to activate a debugger break. Set the registry value 
User / Software / Eplan / Eplan W3 / Assert / BreakOnAssert to true, and the debugger
will stop at a failed assert.
</summary>
            <example>
Example of EplAssert:
<code>
object testObject = null;
Eplan.EplApi.Base.EplAssert oAssert= <b>new</b> Eplan.EplApi.Base.EplAssert();
oAssert.Assert (testObject != null, "The testobject must not be null!");
</code></example>
This will produce an output similar to:
Eplan.EplApiTest.Base.ASSERT_Test.ASSERT_TestTestAssert(0) : The testobject must not be null!
</member>
        <member name="M:Eplan.EplApi.Base.Settings.GetMultiLangStringDefault(System.String,System.Int32)">
            <summary>
Returns default MultiLangString value of a setting. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Default MultiLangString value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetStringDefault(System.String,System.Int32)">
            <summary>
Returns default string value of a setting. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Default string value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetDoubleDefault(System.String,System.Int32)">
            <summary>
Returns default double value of a setting. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Default double value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetNumericDefault(System.String,System.Int32)">
            <summary>
Returns default numeric value of a setting. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Default numeric value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetBoolDefault(System.String,System.Int32)">
            <summary>
Returns default boolean value of a setting. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Default bool value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.RemoveAllIndexedSetting(System.String)">
            <summary>
Removes all indexed setting.
</summary>
            <param name="strSetting">Indicates the path of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be removed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.DeleteSetting(System.String)">
            <summary>
Resets an individual setting to the value of the corresponding default setting. If it has no default setting, the setting is deleted.
</summary>
            <param name="strSetting">Indicates the path of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be reset or deleted.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddMultiLangStringDefault(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new default setting for a multilanguage string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="arrDefaults">Array of defaults added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a multilanguage string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a multilanguage string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddStringDefault(System.String,System.String[],System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddStringSetting(System.String,System.String[],System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddStringSetting(System.String,System.String[],System.String[],System.String,System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddDoubleDefault(System.String,System.Double[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.			
Warning: double values are stored with precision to 15 digits only!</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddDoubleSetting(System.String,System.Double[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.			
Warning: double values are stored with precision to 15 digits only!</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddDoubleSetting(System.String,System.Double[],Eplan.EplApi.Base.Range[],System.String,System.Double[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddNumericDefault(System.String,System.Int32[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric default.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddNumericSetting(System.String,System.Int32[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric value.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddNumericSetting(System.String,System.Int32[],Eplan.EplApi.Base.Range[],System.String,System.Int32[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric value.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting could not be set.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddBoolDefault(System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddBoolSetting(System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.AddBoolSetting(System.String,System.Boolean[],System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned, obsolete, always true is returned</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Sets the value of a setting. 
The index under which setting will be written is evaluated automatically. First free index is used.
The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="mlValue">Indicates the value of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="mlValue">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetStringSetting(System.String,System.String)">
            <summary>
Sets the value of a setting. 
The index under which setting will be written is evaluated automatically. First free index is used.
The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="strValue">Indicates the value of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetStringSetting(System.String,System.String,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="strValue">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetDoubleSetting(System.String,System.Double)">
            <summary>
Sets the value of a setting. 
The index under which setting will be written is evaluated automatically. First free index is used.
The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="dValue">Indicates the value of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetDoubleSetting(System.String,System.Double,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="dValue">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetNumericSetting(System.String,System.Int32)">
            <summary>
Sets the value of a setting. 
The index under which setting will be written is evaluated automatically. First free index is used.
The index starts at 0.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="nValue">value to set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetNumericSetting(System.String,System.Int32,System.Int32)">
            <summary>
Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="nValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetBoolSetting(System.String,System.Boolean)">
            <summary>
Sets the value of a setting. 
The index under which setting will be written is evaluated automatically. First free index is used.
The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="bValue">Indicates the value of the setting.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.SetBoolSetting(System.String,System.Boolean,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="bValue">Indicates the value of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetMultiLangStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetExpandedStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a string setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.
If this path is identified via an EPLAN path (e.g. $Eplan, $MD, ...) this identifier is resolved.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetDoubleSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetNumericSetting(System.String,System.Int32)">
            <summary>
Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting.
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetBoolSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="nIdx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">
The setting is not defined.
</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetCountOfDefaultValues(System.String)">
            <summary>
Returnes the number of default values of a setting.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <returns>The number of default values of the setting, as unsigned integer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetCountOfValues(System.String)">
            <summary>
Returnes the number of values of a setting.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <returns>The number of values of the setting, as unsigned integer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetInfo(System.String)">
            <summary>
Returns the description of the setting.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <returns>Description of the setting as a string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetDescription(System.String)">
            <summary>
\Returns the description of a setting.
</summary>
            <param name="strSettingPath">Indicates the path of the
                             setting.</param>
            <returns>
The description of a setting as a string.
</returns>
            <exception cref="!:System\:\:ArgumentNullException">Thrown
                                                  when
                                                  <c>strSettingPath</c>
                                                  is
                                                  <c>null</c>.</exception>
            <exception cref="!:System\:\:ArgumentException">Thrown
                                              when
                                              <c>strSettingPath</c>
                                              is
                                              empty.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">The
                                                           setting
                                                           is
                                                           not
                                                           defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetSourceFile(System.String)">
            <summary>
Returns the path of the last XML file from which the setting was read or into which it was written.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <returns>Path and name of the XML file as a string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.GetTypeOfSetting(System.String)">
            <summary>
Returns the type of the setting.
</summary>
            <param name="strSettingPath">path to settings</param>
            <returns>the type of the setting as enum</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The setting is not defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.ExistSetting(System.String)">
            <summary>
Verifies whether specified setting exists.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <returns>Boolean value that indicates whether setting exists.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.WriteSetting(System.String,System.String)">
            <summary>
Exports the specified setting to an XML file.
</summary>
            <param name="strSettingPath">Indicates the path of the
                             setting.</param>
            <param name="strFilename">Indicates the full file name of
                          the settings XML file.</param>
            <exception cref="!:System\:\:ArgumentNullException">Thrown
                                                  when
                                                  <c>strSettingPath</c>
                                                  is
                                                  <c>null</c>.
                                                  Thrown
                                                  when
                                                  <c>strFilename</c>
                                                  is
                                                  <c>null</c>.</exception>
            <exception cref="!:System\:\:ArgumentException">Thrown
                                              when
                                              <c>strSettingPath</c>
                                              is
                                              empty.
                                              Thrown
                                              when
                                              <c>strFilename</c>
                                              is
                                              empty.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">The
                                                           setting
                                                           is
                                                           not
                                                           defined.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.WriteSettings(System.String)">
            <summary>
Exports all settings to a settings XML file.
</summary>
            <param name="strFilename">Indicates the full file name of
                          the settings file.</param>
            <exception cref="!:System\:\:ArgumentNullException">Thrown
                                                  when
                                                  <c>strFilename</c>
                                                  is
                                                  <c>null</c>.</exception>
            <exception cref="!:System\:\:ArgumentException">Thrown
                                              when
                                              <c>strFilename</c>
                                              is
                                              empty.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">Method
                                                           failed.</exception>
            <remarks>
This exports all settings. Also those settings, which are not
visible in the settings dialog. This includes settings, which
the API user has created.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.ReadSettings(System.String)">
            <summary>
Imports a settings xml file and sets all the settings it
contains.
</summary>
            <param name="strFilename">Indicates the name of the settings
                          \file.</param>
            <exception cref="!:System\:\:ArgumentNullException">Thrown
                                                  when
                                                  <c>strFilename</c>
                                                  is
                                                  <c>null</c>.</exception>
            <exception cref="!:System\:\:ArgumentException">Thrown
                                              when
                                              <c>strFilename</c>
                                              is
                                              empty.</exception>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">Method
                                                           failed.</exception>
            <remarks>
In contrary to GUI all the settings from the XML file are
imported, not only those, which are visible in the settings
dialog.
Settings imported by this method may not take effect immediately.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.Finalize">
            <summary>
Non-deterministic Finalizer of Settings object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.Dispose">
            <summary>
Destructor for deterministic finalization of Settings object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Settings.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Settings">
            <summary>
Settings are used to save values of variables beyond the
runtime of the program and to make them available again the
next time program is run (similar to the Windows registry). A
setting has a unique identifier in the system. A value or a
list of values can be saved to a setting. It is possible to
group settings into structures <see text="Eplan.EplApi.Base.SchemeSetting" cref="!:Eplan::EplApi::Base::SchemeSetting" />.
</summary>
            <remarks>
Due to changes in EPLAN, it may happen that settings will 
change their type or name or that some settings will be completely removed. 
We cannot guarantee the long-term compatibility of settings. When updating to a newer version,
please check your source code, whether the settings you use are still working.
</remarks>
            <example>
Access to a setting of the system
<code lang="C#"><b>try</b>
{
  String strGuiLanguage= <b>new</b> Settings().GetStringSetting("USER.SYSTEM.GUI.LANGUAGE", 0);
  System.Windows.Forms.MessageBox.Show("The user interface language is set to: "+ strGuiLanguage);
}
<b>catch</b> (BaseException exc)
{
  String strMessage= exc.Message;
  System.Windows.Forms.MessageBox.Show("Exception: " + strMessage);
}
</code></example>
            <seealso text="Working with settings" cref="!:WorkingWithSettings" />
        </member>
        <member name="P:Eplan.EplApi.Base.Languages.HelpLanguage">
            <summary>
Gets help language.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.Languages.AlternativeLanguage">
            <summary>
Gets alternative language.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.Languages.GuiLanguage">
            <summary>
Gets Gui language.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Languages.Finalize">
            <summary>
Non-deterministic Finalizer of Languages object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Languages.Dispose">
            <summary>
Destructor for deterministic finalization of Languages object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Languages.#ctor">
            <summary>
Creates a new Language object.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Languages">
            <summary>
Class for language information.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.Height">
            <summary>
Returns height of the rectangle.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.Width">
            <summary>
Returns width of the rectangle.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.LowerLeft">
            <summary>
Returns lower left corner of the rectangle.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.LowerRight">
            <summary>
Returns lower right corner of the rectangle.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.UpperRight">
            <summary>
Returns upper right corner of the rectangle.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.RectangleD.UpperLeft">
            <summary>
Returns upper left corner of the rectangle.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.RectangleD.SetERectangle(ERectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for internal use only.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.RectangleD.#ctor(Eplan.EplApi.Base.PointD,Eplan.EplApi.Base.PointD)">
            <summary> 
Constructor which spans rectangle on two points.
</summary>
            <param name="pt1">The position of the first corner of the rectangle.</param>
            <param name="pt1">The position of the second corner of the rectangle.</param>
        </member>
        <member name="T:Eplan.EplApi.Base.RectangleD">
            <summary> 
This class specifies an area in a coordinate space.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointDbl.ConvertArray(Eplan.EplApi.Base.PointDbl[])">
            <summary>
Converts array of PointD to array of PointDbl
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointDbl.ConvertArray(Eplan.EplApi.Base.PointD[])">
            <summary>
Converts array of PointD to array of PointDbl
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointDbl.AsPointD">
            <summary>
Gets point coordinates as PointD type.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointDbl.Y">
            <summary>
Y coordinate
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointDbl.X">
            <summary>
X coordinate
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointDbl.#ctor(System.Double,System.Double)">
            <summary>
Constructor to initialize a point with a set of coordinates.
</summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Eplan.EplApi.Base.PointDbl.#ctor(Eplan.EplApi.Base.PointD@)">
            <summary>
Default constructor
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointDbl.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.PointDbl">
            <summary>
This class represents a set of coordinates in EPLAN.
It is designed specially for COM technology.
</summary>
            <remarks>
This class is treated like a value type.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD.GetEPoint(EPoint*)">
            <summary>
\internal
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD.SetEPoint(EPoint!System.Runtime.CompilerServices.IsConst*)">
            <summary>
\internal
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointD.Y">
            <summary>
Y coordinate
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.PointD.X">
            <summary>
X coordinate
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD.#ctor(Eplan.EplApi.Base.PointD3D)">
            <summary>
Constructor to initialize a point from a 3D Point
the z Coordinate value will be lost
</summary>
            <param name="point3d">3d point</param>
        </member>
        <member name="M:Eplan.EplApi.Base.PointD.#ctor(System.Double,System.Double)">
            <summary>
Constructor to initialize a point with a set of coordinates.
</summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="T:Eplan.EplApi.Base.PointD">
            <summary>
This class represents a set of coordinates in EPLAN.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.SetContextParameter(Eplan.EplApi.Base.ContextParameterBlock)">
            <summary>
Sets a block of context parameters (as ContextParameterBlock object).
</summary>
            <param name="pParams">a block of parameters to set</param>
            <remarks>
ContextParameterBlock is added to the context.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetContextParameter">
            <summary>
Get the Block of Context Parameters of this Context.
</summary>
            <returns>
The Context Parameter Block when available. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetEContext">
            <summary>
For internal use only.
</summary>
            <returns>
For internal use only.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.SetStrings(System.String[])">
            <summary>
Sets the array filled with strings from the context. (Additional to the parameters)
</summary>
            <param name="stringArray">the string array to set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>stringArray</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetStrings">
            <summary>
Gets the array filled with strings from the context. (Additional to the parameters)
</summary>
            <returns>
array containing strings from the context
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetParameterCount">
            <summary>
Gets the count of the Parameters in this context
</summary>
            <returns>
the count of the parameters.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetParameters">
            <summary>
Gets array filled with parameters names from the context.
</summary>
            <returns>
array containing all paramaters names from the context.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetProgress">
            <summary>
Gets the progress object.
</summary>
            <returns>Progress object or NULL.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.SetProgress(Eplan.EplApi.Base.Progress)">
            <summary>
Sets the progress object.
</summary>
            <param name="oProgress">Progress object</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.GetParameter(System.String,System.String@)">
            <summary>
Gets a parameter from the Context.
</summary>
            <param name="strParameterName">Name of the parameter whose value is determined.</param>
            <param name="strParameterValue">Value of the parameter you search for.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.AddParameter(System.String,System.String)">
            <summary>
Adds a parameter to the Context.
</summary>
            <param name="strParameterName">Indicates the name of the parameter.</param>
            <param name="strNewParameterValue">Indicates the value of this parameter.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.SetEContext(EContext*)">
            <summary>
For internal use only. 
</summary>
            <param name="pEContext">
For internal use only.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.Finalize">
            <summary>
Non-deterministic Finalizer of Context object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.Dispose">
            <summary>
Destructor for deterministic finalization of Context object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.#ctor(EContext*,System.Boolean)">
            <summary>
For internal use only. 
</summary>
            <param name="pEContext">
For internal use only.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.#ctor(EContext*)">
            <summary>
For internal use only. 
</summary>
            <param name="pEContext">
For internal use only.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Context.#ctor">
            <summary>
Creates a new Context object.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Context">
            <summary>
The Context classes are used to pass information about the current
state of the environment as well as generic parameters to objects that can be registered
such as actions, dialogs, etc.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.SetStrings(System.String[])">
            <summary>
Sets the array filled with strings from the context. (Additional to the parameters)
</summary>
            <param name="stringArray">the string array to set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>stringArray</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.GetStrings">
            <summary>
Gets array filled with strings from the context.
</summary>
            <returns>
array containing strings from the context
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.GetParameterCount">
            <summary>
Gets the count of the Parameters in this context
</summary>
            <returns>
the count of the parameters.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.GetParameters">
            <summary>
Gets array filled with parameters names from the context.
</summary>
            <returns>
array containing all paramaters names from the context
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.GetParameter(System.String,System.String@)">
            <summary>
Gets a parameter from the Context.
</summary>
            <param name="strParameterName">Name of the parameter whose value is determined.</param>
            <param name="strParameterValue">Value of the parameter you search for.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.IContext.AddParameter(System.String,System.String)">
            <summary>
Adds a parameter to the Context.
</summary>
            <param name="strParameterName">Indicates the name of the parameter.</param>
            <param name="strNewParameterValue">Indicates the value of this parameter.</param>
        </member>
        <member name="T:Eplan.EplApi.Base.IContext">
            <summary>
IContext is an abstract interface for Context classes.
</summary>
            <remarks>
Context classes are used to pass information about the current 
state of the environment as well as generic parameters to objects that can be registered
such as actions, dialogs, etc.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.ShowImmediately">
            <summary>
Shows the progress bar without any further delay.
When ShowImmediately isnt't called the dialog appears later (with delay),
it prevents the dialog to show unnecessarily (to prevent that the progress flickers up for a short running actions).
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetActionText(System.String)">
            <summary>
Sets a new action text.
</summary>
            <param name="strNewText">The new text.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetOverallActionText(System.String)">
            <summary>
Sets a new action text.
</summary>
            <param name="strNewText">The new text.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.Canceled">
            <summary>
Queries whether the operation was canceled.
</summary>
            <returns>True: The operation was canceled.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.Step(System.Int32)">
            <summary>
Uses a step
</summary>
            <param name="nSteps">Number of steps to be used.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetNeededSteps(System.Int32)">
            <summary>
Indicates how many steps are required to reach 100%.
E.g. used for loops.
</summary>
            <param name="neededSteps">Number of steps</param>
            <remarks>Caution: Keep in mind to call this function after having created a new segment (<see text="beginPart" cref="!:beginPart" />). Otherwise no steps are implemented.</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetTitle(System.String)">
            <summary>
Sets the title of the progress bar.
</summary>
            <param name="strTitle">Title of progress bar</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetAskOnCancel(System.Boolean)">
            <summary>
Asks to confirm the cancel request.
</summary>
            <param name="bAsk">True: Prompt is displayed before termination; False: Termination without prompt</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetAllowCancel(System.Boolean)">
            <summary>
Allows canceling.
</summary>
            <param name="bAllow">True: Cancel is possible; False: Cancel is not possible</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.SetNeededParts(System.Int32)">
            <summary>
Specifies how many segments are required. 
</summary>
            <param name="neededParts">Number of required segments</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.EndPart(System.Boolean)">
            <summary>
Ends segment and closes the window when it is not used.
Don't forget to call it at the end, otherwise a progress dialog may lock P8.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.EndPart">
            <summary>
End segment
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.BeginPart(System.Double,System.String)">
            <summary>
Starts a new segment. All parallel segments should result in a sum of 
100%.
</summary>
            <param name="dPercentageNeeded">Percentage value of using progress bar (or parent segment) in this segment.</param>
            <param name="strSegmentName">Name for this segment</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.ShowLevel(System.Int32)">
            <summary>
Specifies the nesting level up to which a display is made.

</summary>
            <param name="nPartLevelToBeShown">Nesting level</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.GetProgress">
            <summary>
For internal use only.
</summary>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.Finalize">
            <summary>
Non-deterministic Finalizer of Progress object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.Dispose">
            <summary>
Destructor for deterministic finalization of Progress object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.#ctor(EProgress*)">
            <summary>
For internal use only.
</summary>
            <param name="pProgress">For internal use only.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Progress.#ctor(System.String)">
            <summary>
Creates a new progress bar.
</summary>
            <param name="strProgressType">Type of the progress bar to be created.
"SimpleProgress" or "EnhancedProgress"
</param>
        </member>
        <member name="T:Eplan.EplApi.Base.Progress">
            <summary>
This class enables you to access the functions of the progress bar in EPLAN.
</summary>
            <remarks>
There are different kinds of progress bars.
It can be created by functions and 
passed to another function as a parameter object (often in a Context). 
Please call Progress::EndPart(true) at the end to close the dialog.
</remarks>
            <example> Example of using Progress class 
<use name="P8_API_Example_Base_Progress_Example1.cs.txt" /></example>
            <internal>
                <see text="GUI actions in algorithms" cref="!:http://intranet/fue/prod/Eplan495493760Redesign/Developer3475798840Guide/Basics/SDS_GUI-Aktionen_in_Algorithmen.doc" />
            </internal>
        </member>
        <member name="M:Eplan.EplApi.Base.TraceListener.WriteLine(System.String)">
            <summary>
Outputs a line to the system message management.
</summary>
            <param name="message">
The text to be output.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.TraceListener.Write(System.String)">
            <summary>
Outputs a line to the system message management.
</summary>
            <param name="message">
The text to be output.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.TraceListener.Finalize">
            <summary>
Non-deterministic Finalizer of TraceListener object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.TraceListener.Dispose">
            <summary>
Destructor for deterministic finalization of TraceListener object.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.TraceListener">
            <summary>
\Output of trace messages to the EPLAN system message
management (incl. EPLAN log file)
</summary>
            <example>
\Example of TRACE outputs
<code>
Eplan.EplApi.Base.TraceListener oTrace= <b>new</b> Eplan.EplApi.Base.TraceListener();
System.Diagnostics.Trace.Listeners.Add(oTrace); <i>// When new trace listeners are created and added, they must be removed again later!</i>

oTrace.WriteLine("Begin Execute"); <i>// Only write to the EPLAN system message management.</i>
System.Diagnostics.Trace.WriteLine("Begin Execute"); <i>// Send to all trace listeners.</i>


oTrace.Close();
System.Diagnostics.Trace.Listeners.Remove(oTrace);
</code></example>
            <seealso cref="!:TraceOutput" />
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.ReSubstitutePathForDisplay(System.String)">
            <summary>
Substitute values with variables. Returns the changed path. Ignores all variables which are not
visible in P8 Dialogs.
</summary>
            <param name="strPath">Path to be analyzed.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.ReSubstitute(System.String,System.String)">
            <summary>
Substitute values with variable strVariableName. Returns the changed path.
It was designed for COM compatibility. 
</summary>
            <param name="strVariableName">Indicates the name of the variable. The variable has to be passed without P8 variable pointing marks - $().</param>
            <param name="strPath">Path to be analyzed.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.ReSubstitutePath(System.String,System.String)">
            <summary>
Substitute values with variable strVariableName. Returns the changed path.
</summary>
            <param name="strVariableName">Indicates the name of the variable. The variable has to be passed without P8 variable pointing marks - $().</param>
            <param name="strPath">Path to be analyzed.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.ReSubstitute(System.String)">
            <summary>
Substitute values with variables. Returns the changed path.
It was designed for COM compatibility. 
</summary>
            <param name="strPath">Path to be analyzed.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.ReSubstitutePath(System.String)">
            <summary>
Substitute values with variables. Returns the changed path.
</summary>
            <param name="strPath">Path to be analyzed.</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.Substitute(System.String)">
            <summary>
Substitutes variables with their values. Returns the changed path.
It was designed for COM compatibility. 
</summary>
            <param name="strPath">Path to be analyzed</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.SubstitutePath(System.String)">
            <summary>
Substitutes variables with their values. Returns the changed path.
</summary>
            <param name="strPath">Path to be analyzed</param>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Method failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.Finalize">
            <summary>
Non-deterministic Finalizer of PathMap object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.Dispose">
            <summary>
Destructor for deterministic finalization of PathMap object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.PathMap.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.PathMap">
            <summary>
This class enables you access to the functions used for
processing strings that could contain EPLAN path variables.


</summary>
            <remarks>
Here are available EPLAN path variables :
<xtable>
Path                     Meaning
 variable                 
-----------------------  ----------------------------------------------
$(BIN)                   A program directory generated on
                          installation contains the program
                          libraries (*.dll) of the individual
                          modules.
$(CFG)                   A configuration directory generated on
                          installation containing the xml files of
                          the individual modules.
$(CFG_COMPANY)           Configuration directory generated on
                          installation, contains the company
                          settings.
$(CFG_STATION)           Configuration directory generated on
                          installation, contains the station
                          settings.
$(CFG_USER)              Configuration directory generated on
                          installation, contains the user settings.
$(DOC)                   Project-specific directory for documents.
$(EPLAN)                 An upper-level main directory generated on
                          installation.
$(EPLAN_DATA)            A superior directory for master data,
                          generated on installation.
$(IMG)                   Project-specific directory for images.
$(MD_DOCUMENTS)          The directory for documents defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_DXFDWG)             The directory for DXF / DWG files defined
                          under Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_FCTDEFS)            The directory for function definitions
                          defined under Options &gt; Settings &gt;
                          User &gt; Management &gt; Directories.
$(MD_FORMS)              The directory for forms defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_FRAMES)             The directory for plot frames defined
                          under Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_IMG)                The directory for images defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_MACROS)             The directory for macros and outlines
                          defined under Options &gt; Settings &gt;
                          User &gt; Management &gt; Directories.
$(MD_MECHANICALMODELS)   The directory for mechanical models
                          defined under Options &gt; Settings &gt;
                          User &gt; Management &gt; Directories.
$(MD_PARTS)              The directory for parts defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_PROJECTS)           The directory for projects defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_SCHEME)             The directory for schemes defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_SCRIPTS)            The directory for scripts defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_SYMBOLS)            The directory for symbols defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_TEMPLATES)          The directory for templates defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(MD_TRANSLATE)          The directory for translation files
                          defined under Options &gt; Settings &gt;
                          User &gt; Management &gt; Directories.
$(MD_XML)                The directory for XML files defined under
                          Options &gt; Settings &gt; User &gt;
                          Management &gt; Directories.
$(P)                     Full project directory of the currently
                          selected project.
$(PPE_DWG)               The directory for AutoCAD® files, P&amp;I
                          diagrams, and symbol files, defined under
                          Options &gt; Settings &gt; User &gt; PPE &gt;
                          Directories.
$(PPE_FORMS)             The directory for PPE forms defined under
                          Options &gt; Settings &gt; User &gt; PPE &gt;
                          Directories.
$(PPE_LISTS)             The directory for PPE lists defined under
                          Options &gt; Settings &gt; User &gt; PPE &gt;
                          Directories.
$(PPE_MACROS)            The directory for PPE macros for hook-ups
                          defined under Options &gt; Settings &gt;
                          User &gt; PPE &gt; Directories.
$(PPE_MD)                The directory for PPE master data defined
                          under Options &gt; Settings &gt; User &gt;
                          PPE &gt; Directories.
$(PROJECTNAME)           Project name of the currently selected
                          project, without directory path and file
                          extension.
$(PROJECTPATH)           Full project directory of the currently
                          selected project.
$(TMP)                   The directory used by the operating system
                          for temporary files.
</xtable>

For more information about path variables, please refer to
EPLAN Help under the topic

Using EPLAN&gt;User Interface&gt;User
Interface:Reference&gt;Dialog Select Path variable.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.SetList(System.Collections.Generic.List`1{System.Object})">
            <summary>
Set a list for this block
</summary>
            <param name="pList">the list to set.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.GetList">
            <summary>
Get the list saved in this block
</summary>
            <returns>
the list of objects.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.Set(System.String,System.Object)">
            <summary>
Set one object with a name
</summary>
            <param name="strName">the name of this parameter.</param>
            <param name="strObject">the object saved in this block.</param>
            <remarks>
overwrites the existing object when a parameter with this name already exists.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.Get(System.String,System.Object@)">
            <summary>
Get one object with this name
</summary>
            <param name="strName">the name of this parameter.</param>
            <param name="strObject">the object saved in this block.</param>
            <returns>
true when a parameter with this name was found.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.Finalize">
            <summary>
Non-deterministic Finalizer of ContextParameter object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.Dispose">
            <summary>
Destructor for deterministic finalization of ContextParameter object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ContextParameterBlock.#ctor">
            <summary> 
Default constructor.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.ContextParameterBlock">
            <summary> 
A Parameter block for a context. This parameterblock can have
System::Object^ as parameters.
This block can be used to add objects to a context and work with this
objects p.e. inside an action.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.ToDisplay(Eplan.EplApi.Base.ParserParameter)">
            <summary>
Convert the value to a new unit (of parameterForConversion) of this group and make a display
string out of it.
</summary>
            <param name="parameterForConversion">the parameters used for the conversion</param>
            <returns>
Returns the new display string
</returns>
            <exception cref="!:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The unit group of parameterForConversion and me differs</exception>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The Conversion failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.ValueToUnit(Eplan.EplApi.Base.ParserParameter)">
            <summary>
Convert the value to a new unit (of parameterForConversion) of this group.
</summary>
            <param name="parameterForConversion">the parameters used for the conversion</param>
            <returns>
Returns the calculated number
</returns>
            <exception cref="!:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The unit group of parameterForConversion and me differs</exception>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.GetBaseUnit">
            <summary>
Get the base unit of the parsed result of this unitgroup.
</summary>
            <returns>
Returns the unit as string
</returns>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.GetUnit">
            <summary>
Get the unit of the parsed result.
</summary>
            <returns>
Returns the unit as string
</returns>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.GetBaseValue">
            <summary>
Get the value of the parsed result in the base unit of this unitgroup.
</summary>
            <returns>
Returns the number
</returns>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.GetValue">
            <summary>
Get the value of the parsed result.
</summary>
            <returns>
Returns the number
</returns>
            <exception cref="!:Eplan::EplApi::Base::BaseException">The function Set was not called and no parameters are available.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.Set(System.Double,System.String,Eplan.EplApi.Base.ParserParameter)">
            <summary>
The start of any parse. Set the number and the unit to parse and fill the unit of this text in the 
parser parameters.
</summary>
            <param name="dValue">the number</param>
            <param name="strUnitName">the unit as string</param>
            <param name="parameter">the parameters with the unit of this string. Afterwards the unitgroup is defined
for the unitparser.</param>
            <exception cref="!:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.Set(System.String,Eplan.EplApi.Base.ParserParameter)">
            <summary>
The start of any parse. Set the text to parse and fill the unit of this text in the 
parser parameters.
</summary>
            <param name="strValueToParse">the string with a number and optional a unit</param>
            <param name="parameter">the parameters with the unit of this string. Afterwards the unitgroup is defined
for the unitparser.</param>
            <exception cref="!:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.Finalize">
            <summary>
Non-deterministic Finalizer of UnitParser object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.Dispose">
            <summary>
Destructor for deterministic finalization of UnitParser object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.UnitParser.#ctor">
            <summary>
The Constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.UnitParser">
            <summary>
The UnitParser class. Here it is possible to read the unit from a string and convert
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.OnlyUnit">
            <summary>
Display only the Unit.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.OnlyFirstValue">
            <summary>
Display only the first Value.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.GridSize">
            <summary>
The grid size in millimeters. p.e. "4#" means 4 times grid size 
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.WithoutLimiters">
            <summary>
The unit is NOT separated by one of this chars: blank (){}[].,:;!?/\\ 
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.UnitFromParameter">
            <summary>
Get if the unit needs extra parameter to get resolved.
Use the project dependend parameter class if this is true.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.SpaceBetweenUnitAndValue">
            <summary>
Add a space between Unit and the value
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.Precision">
            <summary>
Set the precision of the result (Values used for calculation: 0 up to 8)
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.SuppressFloatingZeroes">
            <summary>
Suppress the last zeroes of a floating result.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.HideUnit">
            <summary>
Hide the unit of the parsed result.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.HideValue">
            <summary>
Hide the value of the parsed result, all other texts (units and additional texts) will remain.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ParserParameter.CanParse">
            <summary>
Parsing can start when the unitid is not empty
</summary>
            <returns>
Returns true when the unitid is valid
</returns>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.Group">
            <summary>
The UnitGroup Property. When first UnitID is set,the group is automatically
defined by the unit.
While setting a Group also the Unit can be changed 
to the first Unit in new Group if:				
- new Group is different than the Group of assigned Unit 
- there is no Unit and Group assigned
When new assigned Group is the same like Unit Group, nothing will change. 
The unitparser can never convert units of different groups
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.ParserParameter.UnitID">
            <summary>
The UnitId Property. Set or get the unit of the parameters.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ParserParameter.Finalize">
            <summary>
Non-deterministic Finalizer of ParserParameter object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ParserParameter.Dispose">
            <summary>
Destructor for deterministic finalization of ParserParameter object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ParserParameter.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.ParserParameter">
            <summary>
Parameter Class for the usage with UnitParser. Configure the unit and the look of the 
Parser result.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Unit">
            <summary>
A unit. Every unit enum starts with the group name.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.UnitGroup">
            <summary>
The group of one unit. Conversion is only possible inside groups
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.unregisterModul">
            <summary>
For internal use only. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.registerModul">
            <summary>
For internal use only. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.exit">
            <summary>
For internal use only. 
</summary>
            <returns>
For internal use only. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.initGui">
            <summary>
For internal use only. 
</summary>
            <returns>
For internal use only. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.init">
            <summary>
For internal use only. 
</summary>
            <returns>
For internal use only. 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.Module.#ctor">
            <summary>
For internal use only. 
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.Module">
            <summary>
For internal use only. 
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.isAssemblyBlocked(System.Reflection.Assembly)">
            <summary>
For internal use only. Check if a loaded assembly is blocked.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.RemoveFinder(Eplan.EplApi.Base.Internal.LicenseChecker.EventHandlerFindAssemblyOwner)">
            <summary>
For internal use only. Remove when added before.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.AddFinder(Eplan.EplApi.Base.Internal.LicenseChecker.EventHandlerFindAssemblyOwner)">
            <summary>
For internal use only. Add a finder when you are an entry point
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.CheckLicOfAssembly(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
For internal use only. Test the license of the call stack.
Check if this assembly needs an licence (and has to be signed) and checks this licence. (option test)
returns true when successful. 
</summary>
            <param name="theAssembly">
the assembly to check
</param>
            <param name="bSilent">
Report an error message to the user. When bSilent is true the message is
only written to the system error messages
</param>
            <param name="bThrowOnError">
throws an SecurityException on missi ng licenses.
</param>
            <returns>
True when all licenses are avaliable
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.LockLicensesOfCallers(System.Boolean,System.Boolean)">
            <summary>
For internal use only. Locks the license of the call stack.

</summary>
            <param name="bSilent">
Report an error message to the user. When bSilent is true the message is
only written to the system error messages
</param>
            <param name="bThrowOnError">
throws an SecurityException on missi ng licenses.
</param>
            <returns>
True when all licenses are avaliable
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.LicenseChecker.TestLicensesOfCallers(System.Boolean,System.Boolean)">
            <summary>
For internal use only. Test the license of the call stack.

</summary>
            <param name="bSilent">
Report an error message to the user. When bSilent is true the message is
only written to the system error messages
</param>
            <param name="bThrowOnError">
throws an SecurityException on missing licenses.
</param>
            <returns>
True when all licenses are avaliable
</returns>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.LicenseChecker">
            <summary>
For internal use only.
Class to do some licese checks
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.EplAssemblyInfo">
            <exclude>
For internal use only. 
</exclude>
        </member>
        <member name="F:Eplan.EplApi.Base.SettingNode.m_bDelete">
            <summary>For internal use only.</summary>
        </member>
        <member name="F:Eplan.EplApi.Base.SettingNode.m_pESNodeHandle">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetNodeHandle(SSettingNode*)">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.Write(System.String)">
            <summary>
Writes all settings to a file. 
</summary>
            <param name="strFileName">Indicates the full file name of the settings file.</param>
            <example>
 Example how to export main settings node by SettingNode:
 <code lang="C#">
  SettingNode oSettingNode = new SettingNode("USER");
  oSettingNode.Write("G:\\temp\\1.xml");
 </code></example>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strFileName</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strFileName</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.MergeWithNode(Eplan.EplApi.Base.SettingNode)">
            <summary>
Merges settings nodes. 
</summary>
            <param name="oSettingNode">Indicates the settings node to be merged with this one.</param>
            <returns>True: Operation was successful. <para>False: Operation failed.</para></returns>
            <remarks>All Settings nodes and Settings of oSettingNode are added to this node. Existing settings are 
NOT overwritten.</remarks>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddMultiLangStringDefault(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a multilanguage string default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a multilanguage string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.MultiLangString[],System.String,Eplan.EplApi.Base.MultiLangString[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a multilanguage string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddStringDefault(System.String,System.String[],System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddStringSetting(System.String,System.String[],System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddStringSetting(System.String,System.String[],System.String[],System.String,System.String[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a string value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Ranges used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddDoubleDefault(System.String,System.Double[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.			
Precision: 15 numbers of significant digits are supported.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddDoubleSetting(System.String,System.Double[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.			
Precision: 15 numbers of significant digits are supported.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddDoubleSetting(System.String,System.Double[],Eplan.EplApi.Base.Range[],System.String,System.Double[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a double value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddNumericDefault(System.String,System.Int32[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric default.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddNumericSetting(System.String,System.Int32[],Eplan.EplApi.Base.Range[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric value.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddNumericSetting(System.String,System.Int32[],Eplan.EplApi.Base.Range[],System.String,System.Int32[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a numeric value.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="arrRange">Array of <see text="Ranges" cref="T:Eplan.EplApi.Base.Range" />. Used for value validation.</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting could not be set.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddBoolDefault(System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean default. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strDefBy</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strDefBy</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddBoolSetting(System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strDefBy</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strDefBy</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.AddBoolSetting(System.String,System.Boolean[],System.String,System.Boolean[],Eplan.EplApi.Base.ISettings.CreationFlag)">
            <summary>
Defines a new setting for a boolean value. 
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="arrDefaults">Array of default values</param>
            <param name="strInfo">Infomation added to setting as a description</param>
            <param name="arrValues">Array of values added to the setting</param>
            <param name="eFlag">
                <see text="Creation flag " cref="T:Eplan.EplApi.Base.ISettings.CreationFlag" />
            </param>
            <returns>
                <para>True: The setting could not be found and was created successfully.</para>
                <para>False: The setting already exists and has not been changed, obsolete, always true is returned.</para>
            </returns>
            <remarks>Default definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and 
that do not require ranges of values.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strSettingPath</c> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strDefBy</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <c>strDefBy</c> is empty.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be added.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetStringSetting(System.String,System.String,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="str">Indicates the value of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetDoubleSetting(System.String,System.Double,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
            <remarks>Precision: 15 numbers of significant digits are supported.</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetNumericSetting(System.String,System.Int32,System.Int32)">
            <summary>
Sets the value of project settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="nValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.SetBoolSetting(System.String,System.Boolean,System.Int32)">
            <summary>
Sets the value of a setting. 
If a setting is made and an index is specified that exceeds the number of values,
the corresponding values are created, based on the predefined value. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="value">Indicates the value of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetMultiLangStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetStringSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetDoubleSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetNumericSetting(System.String,System.Int32)">
            <summary>
Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting.
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetBoolSetting(System.String,System.Int32)">
            <summary>
Returns the value of a setting. 
If a setting is read that has no value for this index, 
the default value is returned. The index starts at 0.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="idx">Indicates the index.</param>
            <returns>Returns the value of the setting.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetListOfNodes(System.Collections.Specialized.StringCollection@,System.Boolean)">
            <summary>
Determines all settings nodes.
</summary>
            <param name="colOfNodes">Container to which existing settings nodes are output.</param>
            <param name="bAbsolutPath">Controls the output: 
<para>True: Path of settings is absolute.</para><para>False: Relative paths of settings are output.</para></param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetListOfSettings(System.Collections.Specialized.StringCollection@,System.Boolean)">
            <summary>
Determines all settings of this node.
</summary>
            <param name="colOfSettings">Container to which existing settings are output.</param>
            <param name="bAbsolutPath">Controls the output: 
<para>True: Path of settings is absolute.</para><para>False: Relative paths of settings are output.</para></param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetListOfAllSettings(System.Collections.Specialized.StringCollection@,System.Boolean)">
            <summary>
Determines all settings.
</summary>
            <param name="colOfSettings">Container to which existing settings are output.</param>
            <param name="bAbsolutPath">Controls the output: 
<para>True: Path of settings is absolute.</para><para>False: Relative paths of settings are output.</para></param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.ExistSetting(System.String)">
            <summary>
Verifies whether specified setting exists.
</summary>
            <param name="strSettingPath">Path of the setting.</param>
            <returns>Boolean value that indicates whether setting exists.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetParentNode">
            <summary>
Determines the parent node.
</summary>
            <returns>The parent node.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetSubNode(System.String)">
            <summary>
Determines a child node.
</summary>
            <param name="strSubNodePath">Paths of the child node.</param>
            <returns>The child node.If child node doesn't exist,NULL value is returned.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetCountOfNodes">
            <summary>
Determines the number of child nodes.
</summary>
            <returns>Returns the number as unsigned int.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetCountOfSettings">
            <summary>
Determines the number of child settings (subordinate settings).
</summary>
            <returns>Returns the number as unsigned int.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetNodePathDot">
            <summary>
Determines the path of this node.
</summary>
            <returns>Returns the path of this node as a string, with the string segments separated by dots.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.GetNodePath">
            <summary>
Determines the path of this node.
</summary>
            <returns>Returns the path of this node as a string.</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.ResetNode">
            <summary>
Resets the node to default. All settings inside are deleted and copied from defaults again.
</summary>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">The
                                                           object
                                                           has
                                                           not
                                                           been
                                                           initialized
                                                           correctly.
                                                           The
                                                           function
                                                           failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.DeleteNode">
            <summary>
Deletes this node. Clears the node before deleting it.
</summary>
            <exception cref="!:Eplan\:\:EplApi\:\:Base\:\:BaseException">The
                                                           object
                                                           has
                                                           not
                                                           been
                                                           initialized
                                                           correctly.
                                                           The
                                                           function
                                                           failed.</exception>
            <remarks>
A setting node may also be a scheme setting. Make sure, that
if you delete a scheme, to set an other scheme as LastUsed
scheme. If the current scheme is deleted and no other scheme
is set as the current scheme, in the scheme selection
drop-down list an entry [No value set] will be displayed.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.ClearNode">
            <summary>
Clears the node, the node itself remains.
</summary>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.DeleteSetting(System.String)">
            <summary>
Resets an individual setting to the value of the corresponding default setting. If it has no default setting, the setting is deleted.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when setting cannot be reset or deleted.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.ClearSetting(System.String,System.Int32)">
            <summary>
Deletes the value. The setting definition is maintained.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <param name="idx">Indicates index of the value of the setting.</param>
            <exception cref="T:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.ClearSetting(System.String)">
            <summary>
Deletes values. The setting definition is maintained.
</summary>
            <param name="strSettingPath">Indicates the path of the setting.</param>
            <exception cref="!:System.ArgumentNullException">The value of the parameter object is NULL.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The object has not been initialized correctly.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">The function failed.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.Finalize">
            <summary>
Non-deterministic Finalizer of SettingNode object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.Dispose">
            <summary>
Destructor for deterministic finalization of SettingNode object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.#ctor(SSettingNode*,System.Boolean)">
            <summary>
Constructor
</summary>
            <param name="pEsNodeHandle">Indicates the path of the node.</param>
            <param name="bCopy">Indicates whether the settings node is to be copied.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.#ctor(System.String)">
            <summary>
Constructor
</summary>
            <param name="strNodePath">Indicates the path of the node.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.Set(System.String)">
            <summary>
Defines the path to the settings node.
</summary>
            <param name="strNodePath">Indicates the path of the node.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SettingNode.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.SettingNode">
            <summary>
Allows access to settings and relative access to
setting-nodes. A setting key consists of a number of sections
separated by '.' Each section except the last one is called a
setting-node. Setting-nodes and settings together build the
settings tree. The settings are the leaves of this tree. The
SettingNode class helps iterating trough the nodes and e.g.
gives you the possibility to delete a node completely.
</summary>
            <remarks>
Due to changes in EPLAN, it may happen that settings will 
change their type or name or that some settings will be completely removed. 
We cannot guarantee the long-term compatibility of settings. When updating to a newer version,
please check your source code, whether the settings you use are still working.
</remarks>
            <example> Example of merging 2 nodes
<use name="P8_API_Example_Base_SettingNode_Example1.cs.txt" />
Example of listing sub-nodes 
<use name="P8_API_Example_Base_SettingNode_Example3.cs.txt" /></example>
            <internal>
The Index of the Setting has to be a Int32 and not UInt32 to
make it compatible with VB 
</internal>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.SetMultiLangStringSetting(System.String,Eplan.EplApi.Base.MultiLangString,System.Int32)">
            <summary>
Sets the value of settings on a given path.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="mlValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.SetStringSetting(System.String,System.String,System.Int32)">
            <summary>
Sets the value of settings on a given path.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="strValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.SetDoubleSetting(System.String,System.Double,System.Int32)">
            <summary>
Sets the value of settings on a given path.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="dValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.SetNumericSetting(System.String,System.Int32,System.Int32)">
            <summary>
Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="nValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.SetBoolSetting(System.String,System.Boolean,System.Int32)">
            <summary>
Sets the value of settings on a given path.
</summary>
            <param name="strSettingPath">path to settings</param>
            <param name="bValue">value to set.</param>
            <param name="nIdx">0-based index of the setting</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be set.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetExpandedStringSetting(System.String,System.Int32)">
            <summary>
Reads value from settings. Substitutes path fragments (like $Eplan).
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetMultiLangStringSetting(System.String,System.Int32)">
            <summary>
Reads <see text="Eplan.EplApi.Base.MultiLangString" cref="T:Eplan.EplApi.Base.MultiLangString" /> value from settings
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetStringSetting(System.String,System.Int32)">
            <summary>
Reads string value from settings
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetDoubleSetting(System.String,System.Int32)">
            <summary>
Reads double value from settings
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
            <remarks> Warning: double values are stored with precision to 15 digits only!</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetNumericSetting(System.String,System.Int32)">
            <summary>
Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting.
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns>value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetBoolSetting(System.String,System.Int32)">
            <summary>
Reads bool value from settings.
</summary>
            <param name="strSettingPath">Path to settings</param>
            <param name="nIdx">0-based index.</param>
            <returns> value read from settings</returns>
            <exception cref="T:Eplan.EplApi.Base.BaseException">Thrown when the value cannot be read from settings</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting path dosn't exist.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.GetTypeOfSetting(System.String)">
            <summary>
Returns the type of the setting.
</summary>
            <param name="strSettingPath">path to settings</param>
            <returns>the type of the setting as enum</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.ISettings.ExistSetting(System.String)">
            <summary>
Check if there exist a setting on path given as a parameter.
</summary>
            <param name="strSettingPath">path to settings</param>
            <returns>bool indicating if the setting exist</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>strSettingsPath</c> is <c>null</c>.</exception>
        </member>
        <member name="T:Eplan.EplApi.Base.ISettings.CreationFlag">
            <summary>
Creation flag
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.ISettings.SettingType">
            <summary>
The type one setting can hold data in.	
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.ISettings">
            <summary>
The common interface to P8 settings.
</summary>
        </member>
        <member name="F:Eplan.EplApi.Base.Range.ToValue">
            <summary>
Maximal value(end, stop)
</summary>
            <internal>
Boxed or not values
</internal>
        </member>
        <member name="F:Eplan.EplApi.Base.Range.FromValue">
            <summary>
Minimal value(begin, start)
</summary>
            <internal>
Boxed or not values
</internal>
        </member>
        <member name="T:Eplan.EplApi.Base.Range">
            <summary>
Range of setting values
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.op_Equality(Eplan.EplApi.Base.MultiLangString,Eplan.EplApi.Base.MultiLangString)">
            <summary>
Equality operator
</summary>
            <returns>
                <para>True: Values are identical.</para>
                <para>False: Values are not identical.</para>
            </returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.IsEqual(Eplan.EplApi.Base.MultiLangString)">
            <summary>
Compares every string in every language.  If a string
is different in one language, then == returns FALSE. 
If an language string exists in one of the MultiLangStrings but not in the
others, this function returns FALSE even if the language string
is empty.
</summary>
            <param name="otherVal">MultiLangString to be compared.</param>
            <returns>
                <para>True: Values are identical.</para>
                <para>False: Values are not identical.</para>
            </returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.ContainsData">
            <summary> Returns whether strings are saved in the MultiLanguageString.</summary>
            <returns>
                <para>True: There are saved strings.</para>
                <para>False: No strings saved.</para>
            </returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.Translatable">
            <summary>Indicates whether the MultiLanguageString can be translated.</summary>
            <returns>
                <para>True: MultiLanguageString can be translated.</para>
                <para>False: MultiLanguageString cannot be translated.</para>
            </returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.SetAsString(System.String)">
            <summary>
Sets the contents of a MultiLangString with a string passed as argument
using language marker if necessary. If argument is in MultiLangString form,
it will be parsed and saved under given languages. Otherwise '??_??@' prefix is added
which means that the object is visible the same in every language.
</summary>
            <param name="val">String that is set.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.GetAsString">
            <summary>
Converts an MultiLangString to a string.
The languages are appended to one another, all having the same format.

</summary>
            <returns>
The contents of the multi-language string as a simple string (e.g. "DE@deutsch;EN@english;FR@Fr@@;;en;;ch@@;") 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.Clear">
            <summary>
Removes the contents.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.DeleteAllStringsExceptFor(Eplan.EplApi.Base.LanguageList@)">
            <summary>
Removes unused translations.
</summary>
            <param name="goodLanguages">
Languages that are to be kept in the string.
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.DeleteString(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
Deletes the language setting.
</summary>
            <param name="badLanguage">Language entry to be deleted.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.AddString(Eplan.EplApi.Base.ISOCode.Language,System.String)">
            <summary>
Adds a string in the requested language.
</summary>
            <param name="lang">Language name as ISOCde.Language.</param>
            <param name="val">String to be added for the requested language 'lang'</param>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.GetStringToDisplay(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
Returns the string that is to be displayed in accordance with the passed language.
This may be the string saved for this language
or, if there is no such string, a 
language-independent string.
</summary>
            <param name="lang">
Language to be returned
</param>
            <returns>               
Returns the string in the requested language			
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.GetLanguageList(Eplan.EplApi.Base.LanguageList@)">
            <summary>
Returns the list of the languages currently saved in this <see text="MultiLangString" cref="T:Eplan.EplApi.Base.MultiLangString" />.
</summary>
            <param name="rLanguageList">
The existing language codes are entered in this list.
</param>
            <returns>               
Number of all languages included in this <see text="MultiLangString" cref="T:Eplan.EplApi.Base.MultiLangString" />.
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.GetString(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>Returns the string in the requested language </summary>
            <param name="lang"> Lanuguage code <see text="ISOCode.Language" cref="T:Eplan.EplApi.Base.ISOCode.Language" /> for the language to be returned.</param>
            <returns>               
String in the requested language.				
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.GetEMultiLangString">
            <summary>
Determines the EMultiLangString.
</summary>
            <returns>Returns EMultiLangString.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.Finalize">
            <summary>
Non-deterministic Finalizer of MultiLangString object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.Dispose">
            <summary>
Destructor for deterministic finalization of MultiLangString object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.#ctor(EMultiLangString*,System.Boolean)">
            <summary>
Constructor
</summary>
            <param name="pEMultiLangString">Pointer to EMultiLangString</param>
            <param name="bCopy">Specification whether copy is to be made.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.#ctor(EMultiLangString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy constructor from EMultiLangString
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.MultiLangString.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.MultiLangString">
            <summary>
This class can save strings in various languages at the same time.
Each string can be added, queried, and deleted individually.
</summary>
            <remarks>
When adding a new language string, language-independant string is removed.
When adding a language-independant string, other languages are removed.
</remarks>
        </member>
        <member name="P:Eplan.EplApi.Base.LanguageList.Language(System.Int32)">
            <summary>Determines the ISO code of the given index.</summary>
            <param name="index">Index.</param>
        </member>
        <member name="T:Eplan.EplApi.Base.LanguageList">
            <summary>
Class for managing a list of languages.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetAllLanguages(Eplan.EplApi.Base.LanguageList@)">
            <summary>Determines all set languages.</summary>
            <param name="lstLanguages">List of set languages is returned.</param>
            <returns>Number of set languages.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetAllLongNames(System.Collections.Specialized.StringCollection@)">
            <summary>
Returns a list of full names of all the languages.
</summary>
            <param name="collLanguages">List of language names</param>
            <returns>               
Number of full language names (number of list entries) 					
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetLongName(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
\Returns the full name of the language
</summary>
            <param name="lang">Language specification</param>
            <returns>
Language code and full language name, for example: "en_US
(English US)" 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetLongName(System.String)">
            <summary>
\Returns the full name of the language
</summary>
            <param name="strLang">Language code (two letters), for
                      \example\: "en_US"</param>
            <returns>
Language code and full language name, for example: "en_US
(English US)" 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetNumber(System.String)">
            <summary>
Convert language code to language number
</summary>
            <param name="strLang">Language settings as a string.</param>
            <returns>Language setting as a number (class language)</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetString(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
Returns the language code as a string.
</summary>
            <param name="lang">Language specification</param>
            <returns>Language code as a string.</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetLongName">
            <summary>
\Returns full language name of the language code.
</summary>
            <returns>
Language code and full language name, for example: "en_US
(English US)" 
</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.IsValid">
            <summary>
Determines whether a valid language has been set.
</summary>
            <returns>
                <para>True: Valid language is set.</para>
                <para>False: No valid language set.</para>
            </returns>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.SetNumber(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
Sets the language.
</summary>
            <param name="lang">Language setting</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.SetString(System.String)">
            <summary>
Sets the language.
</summary>
            <remarks>
When a name of language which is passed as parameter will not be recognized
then <see text="L___" cref="F:Eplan.EplApi.Base.ISOCode.Language.L___" /> is used.
</remarks>
            <param name="lang">Language setting</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetNumber">
            <summary>
Determines the language.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.GetString">
            <summary>
Determines string of language setting.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.Finalize">
            <summary>
Non-deterministic Finalizer of ISOCode object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.Dispose">
            <summary>
Destructor for deterministic finalization of ISOCode object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.#ctor(System.String)">
            <summary>
Constructor
</summary>
            <param name="lang">Language specification</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.#ctor(Eplan.EplApi.Base.ISOCode.Language)">
            <summary>
Constructor
</summary>
            <param name="lang">Language specification</param>
        </member>
        <member name="M:Eplan.EplApi.Base.ISOCode.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.ISOCode.Language">
            <summary>
                <see cref="!:MultiLangString" /> can handle these languages.
</summary>
C++ Syntax
public enum Language
{
    L___,
    ....
}
C# Syntax
public enum Language
{
    L___,
    ....
}
Visual Basic Syntax
Public Enum Language
    L___,
    ....
End Enum                                                 
</member>
        <member name="T:Eplan.EplApi.Base.ISOCode">
            <summary>
Class for managing language codes (abbreviations).
<see text="MultiLangString" cref="!:MultiLangString" /> can handle these languages.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.ExceptionServices.getAPIExceptionFromUnmanaged(EBaseException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Created API-Exception based on the type of unmanaged exception. Currently supports only BaseException and LockingException.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.ExceptionServices.ExceptionToEBaseException(System.Exception,EBaseException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Method converts System::Exception to Eplan EBaseExceptions.
</summary>
            <param name="excExc">System exception to be converted.</param>
            <param name="excEBase">Reference to Eplan EBaseException</param>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.ExceptionServices">
            <summary>
Class offers internal services for exceptions.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.SysMessagesCollection.Count">
            <summary>
Gets the number of elements contained in the <c>SysMessagesCollection</c>.
</summary>
            <remarks>
Consecutive messages with the same text (i.e. error description) are joined into one item in the system's message tree.
Therefore the count of messages in the collection may be different then the count of
generated messages.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesCollection.GetSysMsgEnumerator">
            <summary>
Returns a typed enumerator that can iterate through a collection.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesCollection.GetEnumerator">
            <summary>
Returns an enumerator that can iterate through a collection.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesCollection.#ctor(System.Int32,System.Int32,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Constructor.
The collection contains a section of the system message tree.
</summary>
            <param name="nBookmarkIDStart" />
            <param name="nBookmarkIDEnd" />
            <param name="nErrLevel" />
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesCollection.#ctor(System.Int32,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Constructor.
The collection contains a section of the system message tree.
</summary>
            <param name="nBookmarkID">only messages with this value or higher will be regarded; 
if nBookmark = 0 no filter for bookmarks is set</param>
            <param name="nErrLevel">only messages of this severity or higher will be analyzed;
if nErrLevel = MessageLevel::Trace all messages will be received</param>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesCollection.#ctor">
            <summary>
Default constructor.  
The collection contains all system messages that actually exist.
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.SysMessagesCollection">
            <summary>
Class that represents the system-wide message tree. The collection contains the system messages as BaseException objects.
</summary>
            <example>
Example of looping over the SysMessagesCollection
<code lang="C#">
// check, whether errors occurred
int nBookmark = new Eplan.EplApi.Base.BaseException().GetBookmarkID();
Eplan.EplApi.Base.SysMessagesCollection colSysMsg = new Eplan.EplApi.Base.SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);
foreach(Eplan.EplApi.Base.BaseException osysMsg in colSysMsg)
{

	if (osysMsg != null)
	{
		Console.WriteLine("Fehler: " + osysMsg.ToString());
	}
} 
</code>
For further examples, see also in SysMessagesEnumerator class.
</example>
            <remarks>
It is called a message tree, because each message (BaseException) may contain a further inner exception.
Only messages of type "Message", "Warning", "Error", and "Fatal Error" are listed. "Assert" and "Trace" are not added to the SysMessagesCollection.
Normally Consecutive messages with the same text (i.e. error description) are joined into one item in the system's message tree.
Therefore the count of messages in the collection may be different then the count of
generated messages.
The contents of the collection does not depend on the logging mode, which you can configure either by the "Diagnose dialog" in EPLAN 
or by the ELogFileConfigToolu.exe in the bin folder of the respective product variant. The logging mode only influences the EplLog.txt file.
In advanced logging mode the EplLog.txt file also contains Asserts and Traces.
If the logging is set to immediate mode, identical consecutive messages are not joined.
</remarks>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesEnumerator.Reset">
            <summary>
Sets the enumerator to its initial position, 
which is before the first element in 
<see text="Eplan.EplApi.Base.SysMessagesCollection" cref="!:Eplan::EplApi::Base::SysMessagesCollection" /></summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesEnumerator.MoveNext">
            <summary>
Advances the enumerator to the next element of 
<see text="Eplan.EplApi.Base.SysMessagesCollection" cref="!:Eplan::EplApi::Base::SysMessagesCollection" /></summary>
            <returns>true if the enumerator was successfully advanced to the next element; 
false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="P:Eplan.EplApi.Base.SysMessagesEnumerator.Current">
            <summary>
gets the current element in 
<see text="Eplan.EplApi.Base.SysMessagesCollection" cref="!:Eplan::EplApi::Base::SysMessagesCollection" /></summary>
            <returns>the current element</returns>
            <remarks>must be called to advance the enumerator 
to the first element of the collection before reading the current value</remarks>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesEnumerator.Finalize">
            <summary>
Non-deterministic Finalizer of SysMessagesEnumerator object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesEnumerator.#ctor(System.Int32,System.Int32,Eplan.EplApi.Base.MessageLevel)">
            <summary>
for internal use only
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.SysMessagesEnumerator.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.SysMessagesEnumerator">
            <summary>
supports a simple iteration over 
<see text="Eplan.EplApi.Base.SysMessagesCollection" cref="!:Eplan::EplApi::Base::SysMessagesCollection" /></summary>
            <example> iterate over the complete system message tree
<code lang="C#">
SysMessagesCollection colSysMsg = new SysMessagesCollection();
SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();
int nNr=0;

itSysMsg.MoveNext(); // move to first item in collection

do 
{
BaseException osysMsg = itSysMsg.Current as BaseException;
if (osysMsg != null)
{
	nNr++;
}					

} while(itSysMsg.MoveNext());
</code></example>
            <example>get all errors and fatal errors of the system message tree since nBookmark was set;
how to get a bookmark see <see text="Eplan.EplApi.Base.BaseException.GetBookmarkID()" cref="M:Eplan.EplApi.Base.BaseException.GetBookmarkID" /><code lang="C#">
SysMessagesCollection colSysMsg = new SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);
SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();
int nNr=0;

itSysMsg.MoveNext(); // move to first item in collection

do 
{
BaseException osysMsg = itSysMsg.Current as BaseException;
if (osysMsg != null)
{
	nNr++;
}					

} while(itSysMsg.MoveNext());
</code></example>
        </member>
        <member name="F:Eplan.EplApi.Base.LockingException.strFirstFailed2Lock">
            <summary>
String representation of DbObjectId of the object which was accessed without locking.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.SetFirstFailed2LockAsString(System.String)">
            <summary>
Sets value of DbObjectId of the object which caused lock-related error.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.GetAllFailed2LockAsString">
            <summary>
returns all object ids of the objects which were not locked. 
In case this exception was produced while accessing unlocked object in write mode, 
only one object will be returned (the one which was accessed first).
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.GetFirstFailed2LockAsString">
            <summary>
returns the object id of the first object which was not locked.
.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.#ctor(EBaseException*)">
            <summary>
Constructor
</summary>
            <param name="pEBaseExeption">Creation from internal EBaseException.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.#ctor(System.String,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Constructor
</summary>
            <param name="strErrorText">Note on the exception that occurred.</param>
            <param name="eErrorLevel">Severity of the exception that occurred.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.LockingException.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.LockingException">
            <summary>
Exception class that signals locking errors in DataModel.
</summary>
        </member>
        <member name="F:Eplan.EplApi.Base.BaseException.m_pEBaseException">
            <summary>
Internal reference to an EBaseException
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.Init(System.String,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Initialization of current exception.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.GetEBaseException">
            <summary>
Determines internal EBaseException.
</summary>
            <returns>EBaseException is returned.</returns>
        </member>
        <member name="P:Eplan.EplApi.Base.BaseException.NumberOfOccurrences">
            <summary>
Returns number of repetitions of consecutive messages with the same text (i.e. error description) 
which are joined into one item in the system's message tree.
</summary>
        </member>
        <member name="P:Eplan.EplApi.Base.BaseException.MessageLevel">
            <summary>
Returns the level of message as <see text="MessageLevel enumeration member" cref="T:Eplan.EplApi.Base.MessageLevel" />.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.GetMessageText">
            <summary>
Returns the text of the system message without the index
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.GetMessageIndex">
            <summary>
returns the identifying S- number of a system message
</summary>
            <returns>the index as string; if the string is 'S000000' there is no ID 
defined until now</returns>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.GetBookmarkID">
            <summary>
Sets a label in the system error message management for getting a section
of the 'message tree'
</summary>
            <returns>a serial number. save this value for later use</returns>
            <example> get all messages which have been declared since the 
given bookmark was set 
<code lang="C#">
int nBookmark2 = new Eplan.EplApi.Base.BaseException().GetBookmarkID();
...
SysMessagesCollection colSysMsg = new SysMessagesCollection(nBookmark2, Eplan.EplApi.Base.MessageLevel.Error);
SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();
</code></example>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.FixMessage">
            <summary>
Method enters a message in the system-wide message tree.
</summary>
            <example> Writing an error message to the system error message management.
<code lang="C#">
Eplan.EplApi.Base.BaseException exc= new Eplan.EplApi.Base.BaseException("Error message from API module",
                                                                          Eplan.EplApi.Base.MessageLevel.Error);
exc.FixMessage();
</code></example>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.#ctor(EBaseException*)">
            <summary>
Constructor
</summary>
            <param name="pEBaseExeption">Creation from internal EBaseException.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.Finalize">
            <summary>
Non-deterministic Finalizer of BaseException object..
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.Dispose">
            <summary>
Destructor for deterministic finalization of BaseException object.
</summary>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.#ctor(System.String,Eplan.EplApi.Base.MessageLevel,Eplan.EplApi.Base.BaseException)">
            <summary>
Constructor
</summary>
            <param name="strErrorText">Note on the exception that occurred.</param>
            <param name="eErrorLevel">Severity of the exception that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.#ctor(System.String,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Constructor
</summary>
            <param name="strErrorText">Note on the exception that occurred.</param>
            <param name="eErrorLevel">Severity of the exception that occurred.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.Set(System.String,Eplan.EplApi.Base.MessageLevel)">
            <summary>
Initializes the exception data.
</summary>
            <param name="strErrorText">Note on the exception that occurred.</param>
            <param name="eErrorLevel">Severity of the exception that occurred.</param>
        </member>
        <member name="M:Eplan.EplApi.Base.BaseException.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Eplan.EplApi.Base.BaseException">
            <summary>
Exception class derived from ApplicationException.
This is the base class for the exceptions that might occur in
the API.
</summary>
            <seealso text="Throwing and handling exceptions" cref="!:ApiFramework\AddIns\Exceptions werfen.htm" />
        </member>
        <member name="T:Eplan.EplApi.Base.MessageLevel">
            <summary>
Severity of the error
</summary>
            <param name="Message">Note</param>
            <param name="Warning">Warning</param>
            <param name="Error">Error</param>
            <param name="FatalError">Fatal error</param>
        </member>
        <member name="F:Eplan.EplApi.Base.MessageLevel.Error">
in GUI. See also EplAssert class.                          
</member>
        <member name="F:Eplan.EplApi.Base.MessageLevel.Message">
EplLog file, if "Advanced mode" is activated.             
</member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.GetStringLengthErrorText">
            <exclude>
For internal use only. 
</exclude>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.GetHandleErrorText">
            <exclude>
For internal use only. 
</exclude>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.GetFunctionErrorText">
            <exclude>
For internal use only. 
</exclude>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.CollectionToVector(System.Collections.Specialized.StringCollection@,EStringVectorT*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
For internal use only. 
</summary>
            <param name="colToConvert">
For internal use only. 
</param>
            <param name="vecConverted">
For internal use only. 
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.VectorToCollection(EStringVectorT*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.Specialized.StringCollection@)">
            <summary>
For internal use only. 
</summary>
            <param name="vecToConvert">
For internal use only. 
</param>
            <param name="colConverted">
For internal use only. 
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.ListToCollection(EStringListT*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Collections.Specialized.StringCollection@)">
            <summary>
For internal use only. 
</summary>
            <param name="lstToConvert">
For internal use only. 
</param>
            <param name="colConverted">
For internal use only. 
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.EStringToString(EString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
For internal use only. 
</summary>
            <param name="esToConvert">
For internal use only. 
</param>
            <param name="strConverted">
For internal use only. 
</param>
        </member>
        <member name="M:Eplan.EplApi.Base.Internal.StringServices.StringToEString(System.String,EString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
For internal use only. 
</summary>
            <param name="strToConvert">
For internal use only. 
</param>
            <param name="esConvertedString">
For internal use only. 
</param>
        </member>
        <member name="T:Eplan.EplApi.Base.Internal.StringServices">
            <exclude>
For internal use only. 
</exclude>
        </member>
        <member name="F:MODULE_NAME">
            <summary>
Module name for the DLL group
</summary>
        </member>
        <member name="F:Aflicense.m_bIsLicensingAvailable">
is licensing is available
</member>
        <member name="M:Aflicense.isLicensingAvailable">
Checks if licensing is available
</member>
        <member name="F:AfApplication.sm_Application">
************************************************************************
************************************************************************
</member>
        <member name="T:EUnicodeConverter">
EUnicodeConverter.h
</member>
        <member name="M:op_BitwiseAnd(IEArchive*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
global operator to write an EColor into an archive or to read it from
</member>
        <member name="M:EBox3D.getCenter">
get box center point 
</member>
        <member name="M:EBox3D.getDiagonal">
get box direction vector.
</member>
        <member name="M:EPosition3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
explicit set
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from eCabinet/Triga
</member>
        <member name="M:EPosition3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
explicit constructor
</member>
        <member name="M:EPosition3D.#ctor(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion from ETransform3D
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor(EPosition3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EPosition3D.#ctor">
default constructor
</member>
        <member name="F:EArc3D.m_Angle">
angle to End-Point
</member>
        <member name="F:EArc3D.m_StartVector">
Start-Point
</member>
        <member name="F:EArc3D.m_Normal">
normal vector 
</member>
        <member name="F:EArc3D.m_Origin">
center point
</member>
        <member name="M:EArc3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Methodes from Interface ICurve3D
	@see : ICurve3D

</member>
        <member name="M:EPath3D.getEndPoint">
Interface Function
</member>
        <member name="M:EPath3D.getStartPoint">
Interface Function
</member>
        <member name="M:EPath3D.isClosed">
Interface Function
</member>
        <member name="M:EContour3D.triangulate(std.vector&lt;ETriangle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
triangulate closed contour
</member>
        <member name="M:EContour3D.getEndPoint">
Interface Function
</member>
        <member name="M:EContour3D.getStartPoint">
Interface Function
</member>
        <member name="M:EContour3D.isClosed">
Interface Function
</member>
        <member name="T:EPointArray3D">
represents an array of points

</member>
        <member name="M:EBoundingBox3D.checkBoxZRange(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special Function to compare the Z-range of two bounding boxes. 
Needed for hidden line calculation.
returns a negative value if this Z-range is closer to 0 than bb
returns 0 if Z-ranges overlap
returns a positive value if bb Z-range is closer to 0 than this 

</member>
        <member name="M:EBoundingBox3D.isInsideBoxXY(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special Function to compare two bounding boxes by ignoring z-axis. 
Needed for hidden line calculation.
True if this is inside or touching bb
False if this and bb are disjunct. 

</member>
        <member name="M:EBoundingBox3D.isInside(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
special function for polygon inside/outside test:
		return value is true if point is inside, else
		LowCount is increased, if p is left, lower, nearer then LDF
		HighCount is increased, if p is right, upper, farer then RUB

</member>
        <member name="M:EBoundingBox3D.getSize">
returns getLength(GetDiagonale())
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getCenter">
returns getRub()-getLdf()/2
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getDiagonal">
returns getRub()-getLdf()
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRub">
returns right, up back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRuf">
returns right, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdb">
returns right, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getRdf">
returns right, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLub">
returns left, up, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLuf">
returns left, up, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdb">
returns left, down, back Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.getLdf">
returns left, down, front Point of the BoundingBox
throw exception if (!isSet())
</member>
        <member name="M:EBoundingBox3D.isSet">
check, if at least one point was set (is false after clear)
</member>
        <member name="M:EBoundingBox3D.merge(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
adds another BoundingBox
</member>
        <member name="M:EBoundingBox3D.merge(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
adds one Point
</member>
        <member name="M:EBoundingBox3D.clear">
initializes the BoundingBox empty
</member>
        <member name="M:EBoundingBox3D.set(ERectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
initializes the BoundingBox whith a 2D rectangle and the z range
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox whith to corner points
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox as a cube with edges of "size" length
</member>
        <member name="M:EBoundingBox3D.set(EBoundingBox3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox by another BoundingBox
</member>
        <member name="M:EBoundingBox3D.set(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
initializes the BoundingBox with one point (size()=0)
</member>
        <member name="M:EPlane3D.getDirectedDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
distance in direction of normal is positive, other side negative
this value will be negative(!) if the point is opposite to the nomal of the plane
</member>
        <member name="M:EPlane3D.intersect(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ERay3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
intersect Plane with plane; result is a ray 
</member>
        <member name="M:EPlane3D.intersect(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
intersect ray with plane
</member>
        <member name="M:EPlane3D.project(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
projected vector on plane
</member>
        <member name="M:EPlane3D.project(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
projected point on plane
</member>
        <member name="M:EPlane3D.getPointFromPlane(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plane coordinates to world
</member>
        <member name="M:EPlane3D.getPointOnPlane(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
World coordinates to plane, true if exact on plane, else projected point
</member>
        <member name="M:EPlane3D.getDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.getDistanceSq(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:EPlane3D.transform(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform plane
</member>
        <member name="M:EPlane3D.isOn(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if ray is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if vector is flat in the plane
</member>
        <member name="M:EPlane3D.isOn(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if point is on Plane
</member>
        <member name="M:EPlane3D.isParallel(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
check for parallel Planes, true if normals are colinear 
</member>
        <member name="M:EPlane3D.op_Equality(EPlane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plane equality operator.
</member>
        <member name="M:EPlane3D.getAxisV">
Plane V-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getAxisU">
Plane U-Axis (calculated from normal)
</member>
        <member name="M:EPlane3D.getOrigin">
Plane getOrigin
</member>
        <member name="M:EPlane3D.getNormal">
Plane normal vector.
</member>
        <member name="M:ERay3D.rayDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
	this is reverse to getPoint(dbl); 

pkt is projected orthogonal to the ray. then the directed distance between the ray origin and this projection is calculated
</member>
        <member name="M:ERay3D.rayDistanceSq(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates distance between two rays
if result ==0.0, rays intersect, result has coordinates of the intersection point
if result &gt;0.0, the rays don't intersect, result has coordinates of the point of minimal distance on ray1.

</member>
        <member name="M:ERay3D.projectTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate closest point to given Point
</member>
        <member name="M:ERay3D.getDistance(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and ray
</member>
        <member name="M:ERay3D.getDistanceSq(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate minimal distance between Point and Plane
</member>
        <member name="M:ERay3D.transform(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform ray
</member>
        <member name="M:ERay3D.isOn(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
ray is on 
</member>
        <member name="M:ERay3D.isParallel(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
check for parallel rays, true if directions are collinear 
</member>
        <member name="M:ERay3D.op_Equality(ERay3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
ray equality operator.
</member>
        <member name="M:ERay3D.getOrigin">
ray origin
</member>
        <member name="M:ERay3D.getDirection">
ray direction vector.
</member>
        <member name="M:ERay3D.setOrigin(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ray getOrigin
</member>
        <member name="M:ERay3D.setDirection(EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ray direction vector.
</member>
        <member name="M:ERay3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EUnitVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor
</member>
        <member name="M:EUnitVector3D.normalizedScalarprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EUnitVector3D.unit">
normalize to unit length
</member>
        <member name="M:EUnitVector3D.getLength">
get length
</member>
        <member name="M:EUnitVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EUnitVector3D.op_SubtractionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace subtract a vector
</member>
        <member name="M:EUnitVector3D.op_AdditionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add a vector
</member>
        <member name="M:EUnitVector3D.op_DivisionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
divide by a scale
</member>
        <member name="M:EUnitVector3D.op_MultiplicationAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate inplace by a scalar
</member>
        <member name="M:EUnitVector3D.set(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ordinates
</member>
        <member name="M:EUnitVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EUnitVector3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EContour2D.addSegmentBegin(EPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Alias of addSegmentPoint
</member>
        <member name="M:ETransform3D.getMov">
access to transformation vector component of the transformation
</member>
        <member name="M:ETransform3D.getMat">
access to rotation matrix component of the transformation
</member>
        <member name="M:ETransform3D.getScale">
calculates the scale of a 3D-transform. is the 3.root of getDeterminante
	does not work properly, if scaling for x y and z is different 
</member>
        <member name="M:ETransform3D.isMirror">
returns true, if the transformation does mirror objects
</member>
        <member name="M:ETransform3D.getDeterminante">
calculates the determinant of the matrix
</member>
        <member name="M:ETransform3D.transpose">
transpose Matrix (swap columns and rows)
</member>
        <member name="M:ETransform3D.op_UnaryNegation">
build inverse transform 
</member>
        <member name="M:ETransform3D.op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform distance (eg. radius); does not work properly if scaling in x,y and z is different
</member>
        <member name="M:ETransform3D.transform(EVector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a vector inplace

transform a vector inplace
</member>
        <member name="M:ETransform3D.transform(EPoint3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a pointvector inplace

transform a pointvector inplace
</member>
        <member name="M:ETransform3D.op_Multiply(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a pointvector
</member>
        <member name="M:ETransform3D.op_Multiply(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
transform a vector
</member>
        <member name="M:ETransform3D.op_MultiplicationAssignment(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Multiply(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
combine two transformation by matrix multiply
</member>
        <member name="M:ETransform3D.op_Equality(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test equality

test equality
</member>
        <member name="M:ETransform3D.setIdentity">
build identity transform
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
move operator
</member>
        <member name="M:ETransform3D.op_Assign(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
assignment operator
</member>
        <member name="M:ETransform3D.#ctor(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a from values
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a translating ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D, that rotates counter clock wise around the given center point and axis
</member>
        <member name="M:ETransform3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D, from two axis and an origin point
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D from two axis, calculates w = u%v
</member>
        <member name="M:ETransform3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a ETransform3D from three axis
</member>
        <member name="M:ETransform3D.#ctor(System.Double)">
constructs a scaling ETransform3D
</member>
        <member name="M:ETransform3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D by three angles 
</member>
        <member name="M:ETransform3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation ETransform3D by axis and angle
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the move constructor
</member>
        <member name="M:ETransform3D.#ctor(ETransform3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the copy constructor
</member>
        <member name="M:ETransform3D.#ctor">
constructs a unit transform
</member>
        <member name="M:EMatrix3D.op_MultiplicationAssignment(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
in place combine two transformation by matrix multiply
</member>
        <member name="M:EMatrix3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.">
constructs a from values
</member>
        <member name="M:EMatrix3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a scaling matrix
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation matrix by three angles 
</member>
        <member name="M:EMatrix3D.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructs a rotation matrix by axis and angle
</member>
        <member name="M:EMatrix3D.#ctor(EMatrix3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
the copy constructor

the move constructor
</member>
        <member name="M:EMatrix3D.#ctor">
constructs a unit matrix
</member>
        <member name="M:EVector3D.getV">
get as array of doubles 
</member>
        <member name="M:op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
friend operator, first operand not a W3dGeometry class 
skalar multiplication

skalar multiplication
</member>
        <member name="M:EVector3D.normalizedCrossprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates cross product with unit vectors
</member>
        <member name="M:EVector3D.normalizedScalarprod(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates scalarproduct with unit vectors
</member>
        <member name="M:EVector3D.getAngle(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-360°), plane normal vector decides what is the right angle
</member>
        <member name="M:EVector3D.getAngleXY(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.getAngle(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculate angle between vectors (0-180°)
</member>
        <member name="M:EVector3D.isNull">
faster test if getLength() equals 0.0
</member>
        <member name="M:EVector3D.isColinear(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test if two Vectors are colinear 
</member>
        <member name="M:EVector3D.unit">
normalize to unit length
</member>
        <member name="M:EVector3D.getLength">
get length
</member>
        <member name="M:EVector3D.getLengthSq">
get square of length
</member>
        <member name="M:EVector3D.op_Inequality(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test unequal; to bee implemented if needed 
</member>
        <member name="M:EVector3D.op_Equality(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
test equal
</member>
        <member name="M:EVector3D.op_UnaryNegation">
negate a vector
</member>
        <member name="M:EVector3D.op_Modulus(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
vector product
</member>
        <member name="M:EVector3D.op_Subtraction(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
subtract a vector
</member>
        <member name="M:EVector3D.op_Addition(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add a vector
</member>
        <member name="M:EVector3D.op_Multiply(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
scalar product
</member>
        <member name="M:EVector3D.op_Multiply(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate by a scalar
</member>
        <member name="M:EVector3D.op_SubtractionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace subtract a vector
</member>
        <member name="M:EVector3D.op_AdditionAssignment(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add a vector
</member>
        <member name="M:EVector3D.op_DivisionAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
divide by a scale
</member>
        <member name="M:EVector3D.op_MultiplicationAssignment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
multiplicate inplace by a scalar
</member>
        <member name="M:EVector3D.set(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set ordinates
</member>
        <member name="M:EVector3D.getAt(System.UInt32)">
get cordinate at index (0, 1 or 2)

get coordinate 
</member>
        <member name="M:EVector3D.setZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set z coordinate

set z coordinate
</member>
        <member name="M:EVector3D.getZ">
get z coordinate

get z coordinate
</member>
        <member name="M:EVector3D.setY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set y coordinate

set y coordinate
</member>
        <member name="M:EVector3D.getY">
get y coordinate

get y coordinate
</member>
        <member name="M:EVector3D.setX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set x cordinate

set x cordinate
</member>
        <member name="M:EVector3D.getX">
get x cordinate

get x cordinate
</member>
        <member name="M:EVector3D.init">
clear content

clear content
</member>
        <member name="M:EVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion constructor: treat point as vector
</member>
        <member name="M:EVector3D.#ctor(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
move constructor
</member>
        <member name="M:EVector3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EVector3D.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EVector3D.#ctor">
default constructor
</member>
        <member name="M:EPoint3D.getAt(System.UInt32)">
get coordinate 
</member>
        <member name="M:EPoint3D.getV">
get Point as array of doubles 

get as array of doubles 
</member>
        <member name="M:EPoint3D.distanceTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates distance 
</member>
        <member name="M:EPoint3D.distanceSqTo(EPoint3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
calculates square of distance (faster than calc distance)
</member>
        <member name="M:EPoint3D.setZ(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set z coordinate

set z coordinate
</member>
        <member name="M:EPoint3D.z">
get z coordinate

get z coordinate
</member>
        <member name="M:EPoint3D.setY(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set y coordinate

set y coordinate
</member>
        <member name="M:EPoint3D.y">
get y coordinate

get y coordinate
</member>
        <member name="M:EPoint3D.setX(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set x cordinate

set x cordinate
</member>
        <member name="M:EPoint3D.x">
get x cordinate

get x cordinate
</member>
        <member name="M:EPoint3D.#ctor(EVector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
conversion constructor
</member>
        <member name="M:EAngleType.op_UnaryNegation">
invert angle
</member>
        <member name="M:EAngleType.op_SubtractionAssignment(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Subtraction(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add angles 
</member>
        <member name="M:EAngleType.op_AdditionAssignment(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
inplace add angles 
</member>
        <member name="M:EAngleType.op_Addition(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
add angles 
</member>
        <member name="M:EAngleType.value(enAngleType,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle specifyed unit
</member>
        <member name="M:EAngleType.value(enAngleType)">
get Angle specifyed unit
</member>
        <member name="M:EAngleType.trn">
get Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad">
get Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg">
get Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.trn(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in turns; circle=1
</member>
        <member name="M:EAngleType.rad(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in radian; circle=2*PI
</member>
        <member name="M:EAngleType.deg(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
set Angle in degrees; circle=360deg
</member>
        <member name="M:EAngleType.#ctor(EAngleType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy constructor
</member>
        <member name="M:EAngleType.#ctor(enAngleType,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
constructor
</member>
        <member name="M:EAngleType.#ctor">
default constructor
</member>
        <member name="T:enAngleType">
Type to define angle value range
</member>
        <member name="F:AT_TURNS">
circle 1.0
</member>
        <member name="F:AT_RADIAN">
circle 2*PI
</member>
        <member name="F:AT_DEGREE">
circle 360°
</member>
    </members>
</doc>